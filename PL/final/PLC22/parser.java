
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\013\002" +
    "\000\002\014\002\000\002\003\013\000\002\015\002\000" +
    "\002\016\002\000\002\003\012\000\002\017\002\000\002" +
    "\003\013\000\002\020\002\000\002\021\002\000\002\022" +
    "\002\000\002\023\002\000\002\003\021\000\002\003\007" +
    "\000\002\003\005\000\002\005\002\000\002\011\004\000" +
    "\002\011\002\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\002\000\002\007\005\000\002\007" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\007\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\003\000\002\012" +
    "\005\000\002\012\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\004\000\002\024\002\000\002" +
    "\010\006\000\002\025\002\000\002\010\006\000\002\010" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\034\005\010\014\012\017\005\021\024\023" +
    "\011\036\021\037\007\040\015\042\006\043\023\044\014" +
    "\045\004\046\022\001\002\000\042\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\016\uffdb\020\uffdb\022\uffdb\024\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\001\002\000\034\005\010\014\012\017\005\021\024" +
    "\023\011\036\021\037\007\040\015\042\006\043\023\044" +
    "\014\045\004\046\022\001\002\000\004\021\162\001\002" +
    "\000\004\021\144\001\002\000\016\005\010\021\024\023" +
    "\011\044\014\045\004\046\022\001\002\000\004\044\141" +
    "\001\002\000\012\012\137\013\136\015\135\044\uffe7\001" +
    "\002\000\036\002\132\005\010\014\012\017\005\021\024" +
    "\023\011\036\021\037\007\040\015\042\006\043\023\044" +
    "\014\045\004\046\022\001\002\000\044\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\122\016\uffdc\020\uffdc\022\uffdc\024" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\001\002\000\004\021\110\001\002\000" +
    "\014\004\026\005\027\006\031\007\030\016\107\001\002" +
    "\000\040\002\uffff\005\uffff\014\uffff\017\uffff\020\uffff\021" +
    "\uffff\023\uffff\036\uffff\037\uffff\040\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\001\002\000\006\016\105\024" +
    "\104\001\002\000\004\021\100\001\002\000\042\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\016\uffd9\020\uffd9\022\uffd9\024" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\001\002\000\034\005\uffed\014\uffed\017" +
    "\uffed\021\uffed\023\uffed\036\uffed\037\uffed\040\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000\016\005" +
    "\010\021\024\023\011\044\014\045\004\046\022\001\002" +
    "\000\014\004\026\005\027\006\031\007\030\022\032\001" +
    "\002\000\016\005\010\021\024\023\011\044\014\045\004" +
    "\046\022\001\002\000\016\005\010\021\024\023\011\044" +
    "\014\045\004\046\022\001\002\000\016\005\010\021\024" +
    "\023\011\044\014\045\004\046\022\001\002\000\016\005" +
    "\010\021\024\023\011\044\014\045\004\046\022\001\002" +
    "\000\042\004\uffdf\005\uffdf\006\uffdf\007\uffdf\016\uffdf\020" +
    "\uffdf\022\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\001\002\000\042\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\016\uffe2\020\uffe2\022\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\001\002\000\042\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\016\uffe1\020\uffe1\022\uffe1\024\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\001\002\000\042\004\uffe3\005\uffe3\006\031\007" +
    "\030\016\uffe3\020\uffe3\022\uffe3\024\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001" +
    "\002\000\042\004\uffe4\005\uffe4\006\031\007\030\016\uffe4" +
    "\020\uffe4\022\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\034" +
    "\005\ufff6\014\ufff6\017\ufff6\021\ufff6\023\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\001\002\000\034\005\010\014\012\017\005\021\024\023" +
    "\011\036\021\037\007\040\015\042\006\043\023\044\014" +
    "\045\004\046\022\001\002\000\004\042\042\001\002\000" +
    "\004\021\043\001\002\000\020\005\010\021\047\023\011" +
    "\025\044\044\014\045\004\046\022\001\002\000\020\005" +
    "\010\021\047\023\011\025\044\044\014\045\004\046\022" +
    "\001\002\000\026\004\026\005\027\006\031\007\030\026" +
    "\062\027\064\030\061\031\063\034\065\035\066\001\002" +
    "\000\010\022\075\032\052\033\053\001\002\000\020\005" +
    "\010\021\047\023\011\025\044\044\014\045\004\046\022" +
    "\001\002\000\030\004\026\005\027\006\031\007\030\022" +
    "\032\026\062\027\064\030\061\031\063\034\065\035\066" +
    "\001\002\000\010\022\054\032\052\033\053\001\002\000" +
    "\020\005\uffcd\021\uffcd\023\uffcd\025\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\001\002\000\020\005\uffcf\021\uffcf\023\uffcf\025" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\001\002\000\012\016\uffcb" +
    "\022\uffcb\032\uffcb\033\uffcb\001\002\000\020\005\010\021" +
    "\047\023\011\025\044\044\014\045\004\046\022\001\002" +
    "\000\012\016\uffce\022\uffce\032\uffce\033\uffce\001\002\000" +
    "\020\005\010\021\047\023\011\025\044\044\014\045\004" +
    "\046\022\001\002\000\012\016\uffcc\022\uffcc\032\uffcc\033" +
    "\053\001\002\000\016\005\010\021\024\023\011\044\014" +
    "\045\004\046\022\001\002\000\016\005\010\021\024\023" +
    "\011\044\014\045\004\046\022\001\002\000\016\005\010" +
    "\021\024\023\011\044\014\045\004\046\022\001\002\000" +
    "\016\005\010\021\024\023\011\044\014\045\004\046\022" +
    "\001\002\000\016\005\010\021\024\023\011\044\014\045" +
    "\004\046\022\001\002\000\016\005\010\021\024\023\011" +
    "\044\014\045\004\046\022\001\002\000\022\004\026\005" +
    "\027\006\031\007\030\016\uffd5\022\uffd5\032\uffd5\033\uffd5" +
    "\001\002\000\022\004\026\005\027\006\031\007\030\016" +
    "\uffd6\022\uffd6\032\uffd6\033\uffd6\001\002\000\022\004\026" +
    "\005\027\006\031\007\030\016\uffd2\022\uffd2\032\uffd2\033" +
    "\uffd2\001\002\000\022\004\026\005\027\006\031\007\030" +
    "\016\uffd1\022\uffd1\032\uffd1\033\uffd1\001\002\000\022\004" +
    "\026\005\027\006\031\007\030\016\uffd4\022\uffd4\032\uffd4" +
    "\033\uffd4\001\002\000\022\004\026\005\027\006\031\007" +
    "\030\016\uffd3\022\uffd3\032\uffd3\033\uffd3\001\002\000\004" +
    "\016\076\001\002\000\042\002\ufff5\005\ufff5\014\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\023\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\001" +
    "\002\000\012\016\uffd0\022\uffd0\032\052\033\053\001\002" +
    "\000\016\005\010\021\024\023\011\044\014\045\004\046" +
    "\022\001\002\000\014\004\026\005\027\006\031\007\030" +
    "\022\102\001\002\000\004\016\103\001\002\000\042\002" +
    "\uffef\005\uffef\014\uffef\017\uffef\020\uffef\021\uffef\023\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\001\002\000\004\044\106\001\002" +
    "\000\042\002\ufffd\005\ufffd\014\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\023\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\001\002\000\006\016" +
    "\uffe5\024\uffe5\001\002\000\042\002\ufffe\005\ufffe\014\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\023\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\001\002\000\020\005\010\021\047\023\011\025\044\044" +
    "\014\045\004\046\022\001\002\000\010\022\112\032\052" +
    "\033\053\001\002\000\034\005\ufffc\014\ufffc\017\ufffc\021" +
    "\ufffc\023\ufffc\036\ufffc\037\ufffc\040\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\001\002\000\034\005\010\014" +
    "\012\017\005\021\024\023\011\036\021\037\007\040\015" +
    "\042\006\043\023\044\014\045\004\046\022\001\002\000" +
    "\042\002\uffed\005\uffed\014\uffed\017\uffed\020\uffed\021\uffed" +
    "\023\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\001\002\000\042\002\ufffb" +
    "\005\ufffb\014\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\001\002\000\042\002\uffeb\005\uffeb\014" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\117\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\001\002\000\034\005\010\014\012\017\005\021\024" +
    "\023\011\036\021\037\007\040\015\042\006\043\023\044" +
    "\014\045\004\046\022\001\002\000\042\002\ufffa\005\ufffa" +
    "\014\ufffa\017\ufffa\020\ufffa\021\ufffa\023\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\001\002\000\042\002\uffec\005\uffec\014\uffec\017" +
    "\uffec\020\uffec\021\uffec\023\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\001" +
    "\002\000\020\005\010\017\123\021\024\023\011\044\014" +
    "\045\004\046\022\001\002\000\016\005\010\021\024\023" +
    "\011\044\014\045\004\046\022\001\002\000\042\004\026" +
    "\005\027\006\031\007\030\016\uffde\020\uffde\022\uffde\024" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\001\002\000\004\020\131\001\002\000" +
    "\016\004\026\005\027\006\031\007\030\020\uffd7\024\127" +
    "\001\002\000\016\005\010\021\024\023\011\044\014\045" +
    "\004\046\022\001\002\000\004\020\uffd8\001\002\000\042" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\016\uffdd\020\uffdd\022" +
    "\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\001\002\000\004\002\000\001" +
    "\002\000\040\002\001\005\001\014\001\017\001\020\001" +
    "\021\001\023\001\036\001\037\001\040\001\042\001\043" +
    "\001\044\001\045\001\046\001\001\002\000\004\044\140" +
    "\001\002\000\004\044\uffe8\001\002\000\004\044\uffe9\001" +
    "\002\000\004\044\uffea\001\002\000\006\016\uffe6\024\uffe6" +
    "\001\002\000\004\023\142\001\002\000\042\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\016\uffda\020\uffda\022\uffda\024\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\001\002\000\042\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\016\uffe0\020\uffe0\022\uffe0\024\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\001\002\000\016\005\010\021\024\023\011\044\014\045" +
    "\004\046\022\001\002\000\014\004\026\005\027\006\031" +
    "\007\030\016\146\001\002\000\020\005\uffed\021\uffed\023" +
    "\uffed\025\uffed\044\uffed\045\uffed\046\uffed\001\002\000\020" +
    "\005\ufff4\021\ufff4\023\ufff4\025\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\001\002\000\020\005\010\021\047\023\011\025\044" +
    "\044\014\045\004\046\022\001\002\000\010\016\152\032" +
    "\052\033\053\001\002\000\016\005\uffed\021\uffed\023\uffed" +
    "\044\uffed\045\uffed\046\uffed\001\002\000\016\005\ufff3\021" +
    "\ufff3\023\ufff3\044\ufff3\045\ufff3\046\ufff3\001\002\000\016" +
    "\005\010\021\024\023\011\044\014\045\004\046\022\001" +
    "\002\000\014\004\026\005\027\006\031\007\030\022\ufff2" +
    "\001\002\000\004\022\157\001\002\000\034\005\ufff1\014" +
    "\ufff1\017\ufff1\021\ufff1\023\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\001\002\000" +
    "\034\005\010\014\012\017\005\021\024\023\011\036\021" +
    "\037\007\040\015\042\006\043\023\044\014\045\004\046" +
    "\022\001\002\000\042\002\ufff0\005\ufff0\014\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\023\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\001\002" +
    "\000\020\005\uffed\021\uffed\023\uffed\025\uffed\044\uffed\045" +
    "\uffed\046\uffed\001\002\000\020\005\ufff9\021\ufff9\023\ufff9" +
    "\025\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002\000\020\005" +
    "\010\021\047\023\011\025\044\044\014\045\004\046\022" +
    "\001\002\000\010\022\166\032\052\033\053\001\002\000" +
    "\034\005\ufff8\014\ufff8\017\ufff8\021\ufff8\023\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\001\002\000\034\005\010\014\012\017\005\021\024" +
    "\023\011\036\021\037\007\040\015\042\006\043\023\044" +
    "\014\045\004\046\022\001\002\000\042\002\ufff7\005\ufff7" +
    "\014\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\001\002\000\036\005\010\014\012\017\005\020" +
    "\172\021\024\023\011\036\021\037\007\040\015\042\006" +
    "\043\023\044\014\045\004\046\022\001\002\000\042\002" +
    "\uffee\005\uffee\014\uffee\017\uffee\020\uffee\021\uffee\023\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\012\002\012\003\016\004\015\007\017\001" +
    "\001\000\002\001\001\000\012\002\170\003\016\004\015" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\142\001\001\000\002\001\001\000\004\006\133" +
    "\001\001\000\010\003\132\004\015\007\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\036\001\001\000\004\004\024\001\001" +
    "\000\002\001\001\000\004\004\035\001\001\000\004\004" +
    "\034\001\001\000\004\004\033\001\001\000\004\004\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\037" +
    "\001\001\000\010\003\040\004\015\007\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\044\010\045" +
    "\001\001\000\006\004\044\010\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\047\010\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\056\001" +
    "\001\000\004\024\054\001\001\000\002\001\001\000\006" +
    "\004\044\010\055\001\001\000\002\001\001\000\006\004" +
    "\044\010\057\001\001\000\002\001\001\000\004\004\073" +
    "\001\001\000\004\004\072\001\001\000\004\004\071\001" +
    "\001\000\004\004\070\001\001\000\004\004\067\001\001" +
    "\000\004\004\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\044\010\110\001\001\000\002\001\001\000\004\013" +
    "\112\001\001\000\010\003\113\004\015\007\017\001\001" +
    "\000\004\005\114\001\001\000\004\014\115\001\001\000" +
    "\004\011\117\001\001\000\010\003\120\004\015\007\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\123\001\001\000\006\004\125\012\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\125\012\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\144\001\001\000\002\001\001\000\004" +
    "\005\146\001\001\000\004\020\147\001\001\000\006\004" +
    "\044\010\150\001\001\000\002\001\001\000\004\005\152" +
    "\001\001\000\004\021\153\001\001\000\004\004\154\001" +
    "\001\000\004\022\155\001\001\000\002\001\001\000\004" +
    "\023\157\001\001\000\010\003\160\004\015\007\017\001" +
    "\001\000\002\001\001\000\004\005\162\001\001\000\004" +
    "\015\163\001\001\000\006\004\044\010\164\001\001\000" +
    "\002\001\001\000\004\016\166\001\001\000\010\003\167" +
    "\004\015\007\017\001\001\000\002\001\001\000\010\003" +
    "\132\004\015\007\017\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  VariablesTabla variables = new VariablesTabla();


  int numVar = -1;

  public String newVar(){
      numVar++;
      return "$t"+Integer.toString(numVar);
  }


  int numSaltos = -1;

  public String newSalt(){
      numSaltos++;
      return "L"+Integer.toString(numSaltos);
  }

  public String currentSalt(){
      return "L"+Integer.toString(numSaltos);
  }


  public class saltosCond{
      public String sv, sf;

      public saltosCond(String sv, String sf){
          this.sv = sv;
          this.sf = sf;
      }
  }

  int tamSet=0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaSent ::= listaSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaSent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= crearSet PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= IF AP condicion CP NT$0 sent saltos NT$1 elseornot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= WHILE AP saltos NT$2 condicion CP NT$3 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= DO saltos NT$4 sent WHILE AP condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println(v.sv+":"); PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v1+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
PLXC.out.println("\tgoto "+v1+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
PLXC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent ::= FOR AP expresion PYC saltos NT$5 condicion PYC saltos NT$6 expresion NT$7 CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= PRINT AP expresion CP PYC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		try{
                                          PLXC.out.println("\tprint "+Integer.valueOf(v)+";");
                                        }catch(Exception e){
                                          if(v.substring(0,1)=="$"){
                                          PLXC.out.println("\tprint "+v+";");
                                        }else{
                                          if(variables.contiene(v) && !variables.getTipo(v).contains("set")){
                                            PLXC.out.println("\tprint "+v+";");
                                          }else{
                                            String var5 = newVar();
                                            PLXC.out.println("\t"+var5+"=0;");
                                            String salto6=newSalt(), salto7=newSalt(), salto8=newSalt();
                                            PLXC.out.println(salto6+":");
                                            PLXC.out.println("\tif ("+var5+"<$"+v+"_length) goto "+salto7+";");
                                            PLXC.out.println("\tgoto "+salto8+";");
                                            PLXC.out.println(salto7+":");
                                            String var6 = newVar();
                                            PLXC.out.println("\t"+var6+"="+v+"["+var5+"];");
                                            if(variables.getTipo(v).contains("int")||variables.getTipo(v).contains("float")){
                                              PLXC.out.println("\twrite "+var6+";");
                                            }else if(variables.getTipo(v).contains("char")){
                                              PLXC.out.println("\twritec "+var6+";");
                                            }
                                            
                                            PLXC.out.println("\twritec 32;");
                                            PLXC.out.println("\t"+var5+"="+var5+"+1;");
                                            PLXC.out.println("\tgoto "+salto6+";");
                                            PLXC.out.println(salto8+":");
                                            PLXC.out.println("\twritec 10;");
                                            
                                          }
                                        }
                                        
                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= AL listaSent CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // saltos ::= 
            {
              String RESULT =null;
		RESULT= newSalt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseornot ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseornot ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= INT 
            {
              String RESULT =null;
		RESULT="int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= CHAR 
            {
              String RESULT =null;
		RESULT="char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= FLOAT 
            {
              String RESULT =null;
		RESULT="float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // crearSet ::= SET tipo STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		variables.introduceSet(a,v);RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearSet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // crearSet ::= crearSet COMA STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		variables.introduceSet(a,v);RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearSet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion MAS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"+"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion POR expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"*"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion DIV expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"/"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= MENOS expresion 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"=0-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= AP expresion CP 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= STRING ASIG expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{
                                                    PLXC.out.println("\t"+v1+"="+Integer.valueOf(v2)+";");
                                                  }catch(Exception e){
                                                    if(v1.substring(0,1)=="$"){
                                                    PLXC.out.println("\t"+v1+"="+v2+";");
                                                  }else{
                                                    if(!variables.getTipo(v1).equalsIgnoreCase(variables.getTipo(v2))){
                                                      System.out.println(variables.getTipo(v1));
                                                      System.out.println(variables.getTipo(v2));
                                                      PLXC.out.println("error;");
                                                      System.exit(1);
                                                    }else{
                                                      if(variables.contiene(v1) && !variables.getTipo(v1).contains("set")){
                                                        PLXC.out.println("\t"+v1+"="+v2+";");
                                                      }else{
                                                        PLXC.out.println("\t$"+v1+"_length=$"+v2+"_length;");
                                                        PLXC.out.println("\t"+v1+"="+v2+";");
                                                      }
                                                    }
                                                  }}
                                                  PLXC.out.println("\t"+v1+"="+v2+";");
                                                  RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= STRING ASIG AL valoresSet CL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Collections.reverse(vs);
                                                    if(variables.getTipo(v1).contains("int")||variables.getTipo(v1).contains("char")){
                                                        try{
                                                          for(int i = 0; i<vs.size();i++){
                                                            Integer.parseInt(vs.get(i));
                                                          }
                                                        }catch(Exception e){
                                                          PLXC.out.println("\terror;");
                                                          System.exit(1);
                                                        }
                                                      }else{
                                                          try{
                                                          for(int i = 0; i<vs.size();i++){
                                                            Float.parseFloat(vs.get(i));
                                                          }
                                                        }catch(Exception e){
                                                          PLXC.out.println("\terror;");
                                                          System.exit(1);
                                                        }
                                                      }
                                                    String varTemp = newVar();
                                                    for(int i=0; i<vs.size();i++){
                                                      PLXC.out.println("\t"+varTemp+"["+i+"]= "+vs.get(i)+";");
                                                    }
                                                    PLXC.out.println("\t$"+v1+"_length=0;");
                                                    String iterador = newVar();
                                                    PLXC.out.println("\t"+iterador+"=0;");
                                                    String saltoInicial = newSalt();
                                                    PLXC.out.println(saltoInicial+":");
                                                    String sv1 = newSalt();
                                                    String sf1 = newSalt();
                                                    PLXC.out.println("\tif ("+iterador+"<"+vs.size()+") goto "+sv1+";");
                                                    PLXC.out.println("\tgoto "+sf1+";");
                                                    PLXC.out.println(sv1+":");
                                                    String varTemp2 = newVar();
                                                    String varTemp3 = newVar();
                                                    PLXC.out.println("\t"+varTemp2+"="+varTemp+"["+iterador+"];");
                                                    PLXC.out.println("\t"+varTemp3+"=0;");
                                                    String salto3 = newSalt();
                                                    String salto4 = newSalt();
                                                    PLXC.out.println(salto3+":");
                                                    PLXC.out.println("\tif ("+varTemp3+"==$"+v1+"_length) goto "+salto4+";");
                                                    String varTemp4 = newVar();
                                                    PLXC.out.println("\t"+varTemp4+"="+v1+"["+varTemp3+"];");
                                                    String salto5 = newSalt();
                                                    PLXC.out.println("\tif ("+varTemp4+"=="+varTemp2+") goto "+salto5+";");
                                                    PLXC.out.println("\t"+varTemp3+"="+varTemp3+"+1;");
                                                    PLXC.out.println("\tgoto "+salto3+";");
                                                    PLXC.out.println(salto4+":");
                                                    PLXC.out.println("\t"+v1+"[$"+v1+"_length]="+varTemp2+";");
                                                    PLXC.out.println("\t$"+v1+"_length=$"+v1+"_length+1;");
                                                    PLXC.out.println(salto5+":");
                                                    PLXC.out.println("\t"+iterador+"="+iterador+"+1;");
                                                    PLXC.out.println("\tgoto "+saltoInicial+";");
                                                    PLXC.out.println(sf1+":");
                                            
                                                  RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= NUM 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= APOSTROFE STRING APOSTROFE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Integer.toString(v.codePointAt(0));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= DEC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valoresSet ::= expresion COMA valoresSet 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		v.add(e); RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSet",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valoresSet ::= expresion 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>();
                             l.add(e);
                             RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSet",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion ::= expresion IGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"=="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion ::= expresion DISTINTO expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"!="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= expresion MENOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= expresion MENORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= expresion MAYOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= expresion MAYORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= NEGADO condicion 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new saltosCond(v.sf, v.sv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$9 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= condicion Y NT$9 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(v1.sf+":");
                             PLXC.out.println("\tgoto "+v2.sf+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$10 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= condicion OR NT$10 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(v1.sv+":");
                             PLXC.out.println("\tgoto "+v2.sv+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= AP condicion CP 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
