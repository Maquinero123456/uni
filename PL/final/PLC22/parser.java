
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\010\002\000\002\011\002" +
    "\000\002\003\013\000\002\012\002\000\002\013\002\000" +
    "\002\003\012\000\002\014\002\000\002\003\013\000\002" +
    "\015\002\000\002\016\002\000\002\017\002\000\002\020" +
    "\002\000\002\003\021\000\002\003\007\000\002\003\005" +
    "\000\002\005\002\000\002\007\004\000\002\007\002\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\021\002\000\002\006\006\000\002\022\002\000\002\006" +
    "\006\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\026\005\007\013\006\015\017\030\016\031" +
    "\010\032\013\034\005\035\020\036\012\037\004\001\002" +
    "\000\036\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012\uffe3\016" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\001\002\000\004\015\140\001\002\000" +
    "\026\005\007\013\006\015\017\030\016\031\010\032\013" +
    "\034\005\035\020\036\012\037\004\001\002\000\012\005" +
    "\007\015\017\036\012\037\004\001\002\000\004\015\117" +
    "\001\002\000\030\002\115\005\007\013\006\015\017\030" +
    "\016\031\010\032\013\034\005\035\020\036\012\037\004" +
    "\001\002\000\040\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\113\012\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\001\002\000\004\015" +
    "\101\001\002\000\014\004\036\005\033\006\035\007\041" +
    "\012\100\001\002\000\032\002\uffff\005\uffff\013\uffff\014" +
    "\uffff\015\uffff\030\uffff\031\uffff\032\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\001\002\000\004\015\074\001\002\000" +
    "\012\005\007\015\017\036\012\037\004\001\002\000\026" +
    "\005\uffee\013\uffee\015\uffee\030\uffee\031\uffee\032\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\001\002\000\026\005\ufff7" +
    "\013\ufff7\015\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\001\002\000\026\005\007\013\006" +
    "\015\017\030\016\031\010\032\013\034\005\035\020\036" +
    "\012\037\004\001\002\000\004\034\024\001\002\000\004" +
    "\015\025\001\002\000\014\005\007\015\026\017\030\036" +
    "\012\037\004\001\002\000\014\005\007\015\026\017\030" +
    "\036\012\037\004\001\002\000\010\016\065\024\057\025" +
    "\060\001\002\000\014\005\007\015\026\017\030\036\012" +
    "\037\004\001\002\000\026\004\036\005\033\006\035\007" +
    "\041\020\034\021\040\022\032\023\037\026\042\027\043" +
    "\001\002\000\012\005\007\015\017\036\012\037\004\001" +
    "\002\000\012\005\007\015\017\036\012\037\004\001\002" +
    "\000\012\005\007\015\017\036\012\037\004\001\002\000" +
    "\012\005\007\015\017\036\012\037\004\001\002\000\012" +
    "\005\007\015\017\036\012\037\004\001\002\000\012\005" +
    "\007\015\017\036\012\037\004\001\002\000\012\005\007" +
    "\015\017\036\012\037\004\001\002\000\012\005\007\015" +
    "\017\036\012\037\004\001\002\000\012\005\007\015\017" +
    "\036\012\037\004\001\002\000\012\005\007\015\017\036" +
    "\012\037\004\001\002\000\022\004\036\005\033\006\035" +
    "\007\041\012\uffe1\016\uffe1\024\uffe1\025\uffe1\001\002\000" +
    "\022\004\036\005\033\006\035\007\041\012\uffe2\016\uffe2" +
    "\024\uffe2\025\uffe2\001\002\000\036\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\012\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\001\002\000" +
    "\022\004\036\005\033\006\035\007\041\012\uffde\016\uffde" +
    "\024\uffde\025\uffde\001\002\000\022\004\036\005\033\006" +
    "\035\007\041\012\uffdd\016\uffdd\024\uffdd\025\uffdd\001\002" +
    "\000\036\004\uffeb\005\uffeb\006\035\007\041\012\uffeb\016" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\001\002\000\036\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\012\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\001\002\000" +
    "\022\004\036\005\033\006\035\007\041\012\uffe0\016\uffe0" +
    "\024\uffe0\025\uffe0\001\002\000\036\004\uffea\005\uffea\006" +
    "\035\007\041\012\uffea\016\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\001\002\000" +
    "\022\004\036\005\033\006\035\007\041\012\uffdf\016\uffdf" +
    "\024\uffdf\025\uffdf\001\002\000\012\012\uffdc\016\uffdc\024" +
    "\057\025\060\001\002\000\014\005\uffd9\015\uffd9\017\uffd9" +
    "\036\uffd9\037\uffd9\001\002\000\014\005\uffdb\015\uffdb\017" +
    "\uffdb\036\uffdb\037\uffdb\001\002\000\014\005\007\015\026" +
    "\017\030\036\012\037\004\001\002\000\012\012\uffda\016" +
    "\uffda\024\uffda\025\uffda\001\002\000\014\005\007\015\026" +
    "\017\030\036\012\037\004\001\002\000\012\012\uffd8\016" +
    "\uffd8\024\uffd8\025\060\001\002\000\004\012\066\001\002" +
    "\000\034\002\ufff6\005\ufff6\013\ufff6\014\ufff6\015\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\001\002\000\010\016\072\024\057\025\060\001" +
    "\002\000\030\004\036\005\033\006\035\007\041\016\071" +
    "\020\034\021\040\022\032\023\037\026\042\027\043\001" +
    "\002\000\036\004\uffe6\005\uffe6\006\uffe6\007\uffe6\012\uffe6" +
    "\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\001\002\000\012\012\uffd7\016\uffd7" +
    "\024\uffd7\025\uffd7\001\002\000\014\004\036\005\033\006" +
    "\035\007\041\016\071\001\002\000\012\005\007\015\017" +
    "\036\012\037\004\001\002\000\014\004\036\005\033\006" +
    "\035\007\041\016\076\001\002\000\004\012\077\001\002" +
    "\000\034\002\ufff0\005\ufff0\013\ufff0\014\ufff0\015\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\001\002\000\034\002\ufffe\005\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\001\002\000\014\005\007\015" +
    "\026\017\030\036\012\037\004\001\002\000\010\016\103" +
    "\024\057\025\060\001\002\000\026\005\ufffd\013\ufffd\015" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\001\002\000\026\005\007\013\006\015\017\030" +
    "\016\031\010\032\013\034\005\035\020\036\012\037\004" +
    "\001\002\000\034\002\uffee\005\uffee\013\uffee\014\uffee\015" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\001\002\000\034\002\ufffc\005\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\001\002\000\034\002" +
    "\uffec\005\uffec\013\uffec\014\uffec\015\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\110\034\uffec\035\uffec\036\uffec\037\uffec\001" +
    "\002\000\026\005\007\013\006\015\017\030\016\031\010" +
    "\032\013\034\005\035\020\036\012\037\004\001\002\000" +
    "\034\002\ufffb\005\ufffb\013\ufffb\014\ufffb\015\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\001\002\000\034\002\uffed\005\uffed\013\uffed\014\uffed" +
    "\015\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\001\002\000\012\005\007\015\017" +
    "\036\012\037\004\001\002\000\036\004\036\005\033\006" +
    "\035\007\041\012\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\001\002\000" +
    "\004\002\000\001\002\000\032\002\001\005\001\013\001" +
    "\014\001\015\001\030\001\031\001\032\001\034\001\035" +
    "\001\036\001\037\001\001\002\000\012\005\007\015\017" +
    "\036\012\037\004\001\002\000\014\004\036\005\033\006" +
    "\035\007\041\012\121\001\002\000\014\005\uffee\015\uffee" +
    "\017\uffee\036\uffee\037\uffee\001\002\000\014\005\ufff5\015" +
    "\ufff5\017\ufff5\036\ufff5\037\ufff5\001\002\000\014\005\007" +
    "\015\026\017\030\036\012\037\004\001\002\000\010\012" +
    "\125\024\057\025\060\001\002\000\012\005\uffee\015\uffee" +
    "\036\uffee\037\uffee\001\002\000\012\005\ufff4\015\ufff4\036" +
    "\ufff4\037\ufff4\001\002\000\012\005\007\015\017\036\012" +
    "\037\004\001\002\000\014\004\036\005\033\006\035\007" +
    "\041\016\ufff3\001\002\000\004\016\132\001\002\000\026" +
    "\005\ufff2\013\ufff2\015\ufff2\030\ufff2\031\ufff2\032\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\001\002\000\026\005\007" +
    "\013\006\015\017\030\016\031\010\032\013\034\005\035" +
    "\020\036\012\037\004\001\002\000\034\002\ufff1\005\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\001\002\000\036" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\012\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\001\002\000\030\005\007\013\006\014\137\015" +
    "\017\030\016\031\010\032\013\034\005\035\020\036\012" +
    "\037\004\001\002\000\034\002\uffef\005\uffef\013\uffef\014" +
    "\uffef\015\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\001\002\000\014\005\uffee\015" +
    "\uffee\017\uffee\036\uffee\037\uffee\001\002\000\014\005\ufffa" +
    "\015\ufffa\017\ufffa\036\ufffa\037\ufffa\001\002\000\014\005" +
    "\007\015\026\017\030\036\012\037\004\001\002\000\010" +
    "\016\144\024\057\025\060\001\002\000\026\005\ufff9\013" +
    "\ufff9\015\ufff9\030\ufff9\031\ufff9\032\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\001\002\000\026\005\007\013\006\015" +
    "\017\030\016\031\010\032\013\034\005\035\020\036\012" +
    "\037\004\001\002\000\034\002\ufff8\005\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\010\002\010\003\014\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\135\003\014" +
    "\004\013\001\001\000\004\004\134\001\001\000\002\001" +
    "\001\000\006\003\115\004\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\072\001\001\000\004\005\020" +
    "\001\001\000\004\014\021\001\001\000\006\003\022\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\030\006\026\001\001\000\006\004\067\006\066\001" +
    "\001\000\002\001\001\000\006\004\030\006\055\001\001" +
    "\000\002\001\001\000\004\004\054\001\001\000\004\004" +
    "\053\001\001\000\004\004\052\001\001\000\004\004\051" +
    "\001\001\000\004\004\050\001\001\000\004\004\047\001" +
    "\001\000\004\004\046\001\001\000\004\004\045\001\001" +
    "\000\004\004\044\001\001\000\004\004\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\062\001\001\000\004\021" +
    "\060\001\001\000\006\004\030\006\061\001\001\000\002" +
    "\001\001\000\006\004\030\006\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\030\006\101\001\001\000\002\001\001\000\004" +
    "\010\103\001\001\000\006\003\104\004\013\001\001\000" +
    "\004\005\105\001\001\000\004\011\106\001\001\000\004" +
    "\007\110\001\001\000\006\003\111\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\117\001\001\000\002\001\001\000\004\005\121" +
    "\001\001\000\004\015\122\001\001\000\006\004\030\006" +
    "\123\001\001\000\002\001\001\000\004\005\125\001\001" +
    "\000\004\016\126\001\001\000\004\004\127\001\001\000" +
    "\004\017\130\001\001\000\002\001\001\000\004\020\132" +
    "\001\001\000\006\003\133\004\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\115\004\013\001\001" +
    "\000\002\001\001\000\004\005\140\001\001\000\004\012" +
    "\141\001\001\000\006\004\030\006\142\001\001\000\002" +
    "\001\001\000\004\013\144\001\001\000\006\003\145\004" +
    "\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    int numVar = 0;

    public String newVar(){
        numVar++;
        return "$t"+Integer.toString(numVar);
    }


    int numSaltos = 0;

    public String newSalt(){
        numSaltos++;
        return "L"+Integer.toString(numSaltos);
    }

    public String currentSalt(){
        return "L"+Integer.toString(numSaltos);
    }


    public class saltosCond{
        public String sv, sf;

        public saltosCond(String sv, String sf){
            this.sv = sv;
            this.sf = sf;
        }
    }

    String saltoWhile="";
    String saltoFor="";

    Stack<String> pila = new Stack<>();
    Stack<String> pila2 = new Stack<>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaSent ::= listaSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaSent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLC.out.println("\tgoto "+v2+";");PLC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= IF AP condicion CP NT$0 sent saltos NT$1 elseornot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= WHILE AP saltos NT$2 condicion CP NT$3 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLC.out.println("\tgoto "+v2+";"); PLC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= DO saltos NT$4 sent WHILE AP condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLC.out.println(v.sv+":"); PLC.out.println("\tgoto "+v2+";"); PLC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLC.out.println(v1+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
PLC.out.println("\tgoto "+v1+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
PLC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent ::= FOR AP expresion PYC saltos NT$5 condicion PYC saltos NT$6 expresion NT$7 CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		PLC.out.println("\tgoto "+v2+";");PLC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent ::= PRINT AP expresion CP PYC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLC.out.println("\tprint "+v+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= AL listaSent CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // saltos ::= 
            {
              String RESULT =null;
		RESULT= newSalt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elseornot ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseornot ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion MAS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLC.out.println("\t"+var+"="+v1+"+"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLC.out.println("\t"+var+"="+v1+"-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion POR expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLC.out.println("\t"+var+"="+v1+"*"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion DIV expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLC.out.println("\t"+var+"="+v1+"/"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= MENOS expresion 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLC.out.println("\t"+var+"=0-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= AP expresion CP 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= STRING ASIG expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLC.out.println("\t"+v1+"="+v2+";");
                                                  RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= NUM 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= expresion IGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLC.out.println("\tif("+v1+"=="+v2+") goto "+slt.sv+";");
                                                PLC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= expresion DISTINTO expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLC.out.println("\tif("+v1+"!="+v2+") goto "+slt.sv+";");
                                                PLC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= expresion MENOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sv+";");
                                                PLC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= expresion MENORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sf+";");
                                                PLC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= expresion MAYOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sv+";");
                                                PLC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= expresion MAYORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sf+";");
                                                PLC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= NEGADO condicion 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new saltosCond(v.sf, v.sv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$9 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= condicion Y NT$9 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLC.out.println(v1.sf+":");
                             PLC.out.println("\tgoto "+v2.sf+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion ::= condicion OR NT$10 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLC.out.println(v1.sv+":");
                             PLC.out.println("\tgoto "+v2.sv+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion ::= AP condicion CP 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
