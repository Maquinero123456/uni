import java_cup.runtime.*;
import java.util.*;

action code{:

  VariablesTabla variables = new VariablesTabla();


  int numVar = -1;

  public String newVar(){
      numVar++;
      return "$t"+Integer.toString(numVar);
  }


  int numSaltos = -1;

  public String newSalt(){
      numSaltos++;
      return "L"+Integer.toString(numSaltos);
  }

  public String currentSalt(){
      return "L"+Integer.toString(numSaltos);
  }


  public class saltosCond{
      public String sv, sf;

      public saltosCond(String sv, String sf){
          this.sv = sv;
          this.sf = sf;
      }
  }

  int tamSet=0;
:};



terminal MAS, MENOS, POR, DIV, ASIG, UMINUS, INT, CHAR, SET, FLOAT;
terminal PYC, AL, CL, AP, CP, APOSTROFE, COMA;
terminal NEGADO, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, OR, Y, IGUAL, DISTINTO;
terminal PRINT, FOR, IF, ELSE, WHILE, DO;
terminal String STRING, NUM, DEC, LETRA;

non terminal listaSent, sent;
non terminal String expresion, saltos, tipo, crearSet;
non terminal saltosCond condicion;
non terminal elseornot;
non terminal ArrayList<String> valoresSet;


precedence right ASIG;
precedence left OR;
precedence left Y;
precedence left IGUAL, DISTINTO;
precedence left MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence right UMINUS;
precedence left AP, CP;
precedence left IF, ELSE;

listaSent ::= listaSent sent | sent ;

sent ::= expresion PYC
       | crearSet PYC
       | IF AP condicion:v1 CP {:PLXC.out.println(v1.sv+":");:} 
         sent saltos:v2 {:PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v1.sf+":");:} 
         elseornot {:PLXC.out.println(v2+":");:}
       | WHILE AP saltos:v2 {:PLXC.out.println(v2+":");:} condicion:v CP 
          {:PLXC.out.println(v.sv+":");:} sent {: PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");:}
       | DO saltos:v2 {:PLXC.out.println(v2+":");:} sent WHILE 
         AP condicion:v CP PYC 
         {:PLXC.out.println(v.sv+":"); PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");:}
       | FOR AP expresion PYC saltos:v1 {:PLXC.out.println(v1+":");:} 
         condicion:v PYC saltos:v2{:PLXC.out.println(v2+":");:}
         expresion {:PLXC.out.println("\tgoto "+v1+";");:} CP {:PLXC.out.println(v.sv+":");:} 
         sent {:PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v.sf+":");:}
       | PRINT AP expresion:v CP PYC {:try{
                                          PLXC.out.println("\tprint "+Integer.valueOf(v)+";");
                                        }catch(Exception e){
                                          if(v.substring(0,1)=="$"){
                                          PLXC.out.println("\tprint "+v+";");
                                        }else{
                                          if(variables.contiene(v) && !variables.getTipo(v).contains("set")){
                                            PLXC.out.println("\tprint "+v+";");
                                          }else{
                                            String var5 = newVar();
                                            PLXC.out.println("\t"+var5+"=0;");
                                            String salto6=newSalt(), salto7=newSalt(), salto8=newSalt();
                                            PLXC.out.println(salto6+":");
                                            PLXC.out.println("\tif ("+var5+"<$"+v+"_length) goto "+salto7+";");
                                            PLXC.out.println("\tgoto "+salto8+";");
                                            PLXC.out.println(salto7+":");
                                            String var6 = newVar();
                                            PLXC.out.println("\t"+var6+"="+v+"["+var5+"];");
                                            if(variables.getTipo(v).contains("int")||variables.getTipo(v).contains("float")){
                                              PLXC.out.println("\twrite "+var6+";");
                                            }else if(variables.getTipo(v).contains("char")){
                                              PLXC.out.println("\twritec "+var6+";");
                                            }
                                            
                                            PLXC.out.println("\twritec 32;");
                                            PLXC.out.println("\t"+var5+"="+var5+"+1;");
                                            PLXC.out.println("\tgoto "+salto6+";");
                                            PLXC.out.println(salto8+":");
                                            PLXC.out.println("\twritec 10;");
                                            
                                          }
                                        }
                                        
                                        }:}
       | AL listaSent CL 
       ;

saltos ::= {:RESULT= newSalt();:};

elseornot ::= ELSE sent 
         | 
         ;

tipo ::= INT {:RESULT="int";:} | CHAR {:RESULT="char";:}| FLOAT {:RESULT="float";:}|;

crearSet ::= SET tipo:v STRING:a {:variables.introduceSet(a,v);RESULT=v;:}
            | crearSet:v COMA STRING:a{:variables.introduceSet(a,v);RESULT=v;:};

expresion ::= expresion:v1 MAS expresion:v2     {:String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"+"+v2+";");
                                                  RESULT=var;:}
            | expresion:v1 MENOS expresion:v2   {:String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"-"+v2+";");
                                                  RESULT=var;:}
            | expresion:v1 POR expresion:v2     {:String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"*"+v2+";");
                                                  RESULT=var;:}
            | expresion:v1 DIV expresion:v2     {:String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"/"+v2+";");
                                                  RESULT=var;:}
            | MENOS expresion:v2                {:String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"=0-"+v2+";");
                                                  RESULT=var;:} %prec UMINUS 
            | AP expresion:v CP                 {:RESULT=v;:}
            | STRING:v1 ASIG expresion:v2       {:try{
                                                    PLXC.out.println("\t"+v1+"="+Integer.valueOf(v2)+";");
                                                  }catch(Exception e){
                                                    if(v1.substring(0,1)=="$"){
                                                    PLXC.out.println("\t"+v1+"="+v2+";");
                                                  }else{
                                                    if(variables.contiene(v1) && !variables.getTipo(v1).contains("set")){
                                                      PLXC.out.println("\t"+v1+"="+v2+";");
                                                    }else{
                                                      PLXC.out.println("\t$"+v1+"_length=$"+v2+"_length;");
                                                      PLXC.out.println("\t"+v1+"="+v2+";");
                                                    }
                                                  }}
                                                  PLXC.out.println("\t"+v1+"="+v2+";");
                                                  RESULT=v1;:}
            | STRING:v1 ASIG AL valoresSet:vs CL  {:String varTemp = newVar();
                                                    for(int i=0; i<vs.size();i++){
                                                      PLXC.out.println("\t"+varTemp+"["+i+"]= "+vs.get(i)+";");
                                                    }
                                                    PLXC.out.println("\t$"+v1+"_length=0;");
                                                    String iterador = newVar();
                                                    PLXC.out.println("\t"+iterador+"=0;");
                                                    String saltoInicial = newSalt();
                                                    PLXC.out.println(saltoInicial+":");
                                                    String sv1 = newSalt();
                                                    String sf1 = newSalt();
                                                    PLXC.out.println("\tif ("+iterador+"<"+vs.size()+") goto "+sv1+";");
                                                    PLXC.out.println("\tgoto "+sf1+";");
                                                    PLXC.out.println(sv1+":");
                                                    String varTemp2 = newVar();
                                                    String varTemp3 = newVar();
                                                    PLXC.out.println("\t"+varTemp2+"="+varTemp+"["+iterador+"];");
                                                    PLXC.out.println("\t"+varTemp3+"=0;");
                                                    String salto3 = newSalt();
                                                    String salto4 = newSalt();
                                                    PLXC.out.println(salto3+":");
                                                    PLXC.out.println("\tif ("+varTemp3+"==$"+v1+"_length) goto "+salto4+";");
                                                    String varTemp4 = newVar();
                                                    PLXC.out.println("\t"+varTemp4+"="+v1+"["+varTemp3+"];");
                                                    String salto5 = newSalt();
                                                    PLXC.out.println("\tif ("+varTemp4+"=="+varTemp2+") goto "+salto5+";");
                                                    PLXC.out.println("\t"+varTemp3+"="+varTemp3+"+1;");
                                                    PLXC.out.println("\tgoto "+salto3+";");
                                                    PLXC.out.println(salto4+":");
                                                    PLXC.out.println("\t"+v1+"[$"+v1+"_length]="+varTemp2+";");
                                                    PLXC.out.println("\t$"+v1+"_length=$"+v1+"_length+1;");
                                                    PLXC.out.println(salto5+":");
                                                    PLXC.out.println("\t"+iterador+"="+iterador+"+1;");
                                                    PLXC.out.println("\tgoto "+saltoInicial+";");
                                                    PLXC.out.println(sf1+":");
                                            
                                                  RESULT=v1;:}
            | STRING:v                          {:RESULT=v;:}
            | NUM:v                             {:RESULT=v;:}
            | APOSTROFE STRING:v APOSTROFE       {:RESULT=Integer.toString(v.codePointAt(0));:}
            | DEC:v {:RESULT=v;:}
            ;

valoresSet ::= expresion:e COMA valoresSet:v {:v.add(e); RESULT=v;:}
             | expresion:e {:ArrayList<String> l = new ArrayList<String>();
                             l.add(e);
                             RESULT=l;:};

condicion ::= expresion:v1 IGUAL expresion:v2 {:saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"=="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;:}
            | expresion:v1 DISTINTO expresion:v2 {:saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"!="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;:}
            | expresion:v1 MENOR expresion:v2 {:saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;:}
            | expresion:v1 MENORIGUAL expresion:v2 {:saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;:}
            | expresion:v1 MAYOR expresion:v2 {:saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;:}
            | expresion:v1 MAYORIGUAL expresion:v2 {:saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;:}
            | NEGADO condicion:v {:RESULT=new saltosCond(v.sf, v.sv);:}
            | condicion:v1 Y {:PLXC.out.println(v1.sv+":");:}
              condicion:v2 {:PLXC.out.println(v1.sf+":");
                             PLXC.out.println("\tgoto "+v2.sf+";");
                             RESULT=v2;:}
            | condicion:v1 OR {:PLXC.out.println(v1.sf+":");:}
              condicion:v2 {:PLXC.out.println(v1.sv+":");
                             PLXC.out.println("\tgoto "+v2.sv+";");
                             RESULT=v2;:}
            | AP condicion:v CP {:RESULT=v;:}
            ;