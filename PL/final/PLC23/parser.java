
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\013\002" +
    "\000\002\014\002\000\002\003\013\000\002\015\002\000" +
    "\002\016\002\000\002\003\012\000\002\017\002\000\002" +
    "\003\013\000\002\020\002\000\002\021\002\000\002\022" +
    "\002\000\002\023\002\000\002\003\021\000\002\003\007" +
    "\000\002\003\005\000\002\005\002\000\002\011\004\000" +
    "\002\011\002\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\002\000\002\007\005\000\002\007" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\005\000\002\004\005\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\005\000\002\004\007" +
    "\000\002\004\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\003\000\002\012\005\000\002\012\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\004" +
    "\000\002\024\002\000\002\010\006\000\002\025\002\000" +
    "\002\010\006\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\034\005\007\014\012\022\005\024\024\026" +
    "\011\041\021\042\010\043\015\045\006\046\023\047\014" +
    "\050\004\051\022\001\002\000\042\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\021\uffd3\023\uffd3\025\uffd3\027\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\001\002\000\034\005\007\014\012\022\005\024\024" +
    "\026\011\041\021\042\010\043\015\045\006\046\023\047" +
    "\014\050\004\051\022\001\002\000\004\024\215\001\002" +
    "\000\020\005\007\022\025\024\024\026\011\047\014\050" +
    "\004\051\022\001\002\000\004\024\176\001\002\000\004" +
    "\047\174\001\002\000\012\012\172\013\171\015\170\047" +
    "\uffe7\001\002\000\036\002\165\005\007\014\012\022\005" +
    "\024\024\026\011\041\021\042\010\043\015\045\006\046" +
    "\023\047\014\050\004\051\022\001\002\000\052\004\uffd4" +
    "\005\uffd4\006\142\007\uffd4\010\143\016\141\017\140\020" +
    "\137\021\uffd4\023\uffd4\025\uffd4\027\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\001" +
    "\002\000\004\024\125\001\002\000\014\004\027\005\030" +
    "\006\032\007\031\021\124\001\002\000\040\002\uffff\005" +
    "\uffff\014\uffff\022\uffff\023\uffff\024\uffff\026\uffff\041\uffff" +
    "\042\uffff\043\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051" +
    "\uffff\001\002\000\006\021\122\027\121\001\002\000\004" +
    "\024\115\001\002\000\042\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\021\uffd1\023\uffd1\025\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\001" +
    "\002\000\034\005\uffed\014\uffed\022\uffed\024\uffed\026\uffed" +
    "\041\uffed\042\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\001\002\000\020\005\007\022\025\024\024" +
    "\026\011\047\014\050\004\051\022\001\002\000\020\005" +
    "\007\022\025\024\024\026\011\047\014\050\004\051\022" +
    "\001\002\000\014\004\027\005\030\006\032\007\031\025" +
    "\033\001\002\000\020\005\007\022\037\024\024\026\011" +
    "\047\014\050\004\051\022\001\002\000\020\005\007\022" +
    "\025\024\024\026\011\047\014\050\004\051\022\001\002" +
    "\000\020\005\007\022\025\024\024\026\011\047\014\050" +
    "\004\051\022\001\002\000\020\005\007\022\025\024\024" +
    "\026\011\047\014\050\004\051\022\001\002\000\042\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\021\uffdb\023\uffdb\025\uffdb" +
    "\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\001\002\000\042\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\021\uffde\023\uffde\025\uffde\027\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\001\002\000\042\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\021\uffdd\023\uffdd\025\uffdd\027\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001" +
    "\002\000\042\004\uffdf\005\uffdf\006\032\007\031\021\uffdf" +
    "\023\uffdf\025\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\001\002\000\020" +
    "\005\007\022\025\024\024\026\011\047\014\050\004\051" +
    "\022\001\002\000\042\004\uffe4\005\uffe4\006\032\007\031" +
    "\021\uffe4\023\uffe4\025\uffe4\027\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002" +
    "\000\004\023\045\001\002\000\016\004\027\005\030\006" +
    "\032\007\031\023\uffcf\027\043\001\002\000\020\005\007" +
    "\022\025\024\024\026\011\047\014\050\004\051\022\001" +
    "\002\000\004\023\uffd0\001\002\000\042\004\046\005\uffe3" +
    "\006\047\007\uffe3\021\uffe3\023\uffe3\025\uffe3\027\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\001\002\000\020\005\007\022\025\024\024\026" +
    "\011\047\014\050\004\051\022\001\002\000\004\047\050" +
    "\001\002\000\042\004\uffe0\005\uffe0\006\uffe0\007\uffe0\021" +
    "\uffe0\023\uffe0\025\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000" +
    "\042\004\uffe2\005\uffe2\006\032\007\031\021\uffe2\023\uffe2" +
    "\025\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\004\023\053" +
    "\001\002\000\006\004\046\006\047\001\002\000\034\005" +
    "\ufff6\014\ufff6\022\ufff6\024\ufff6\026\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\001" +
    "\002\000\034\005\007\014\012\022\005\024\024\026\011" +
    "\041\021\042\010\043\015\045\006\046\023\047\014\050" +
    "\004\051\022\001\002\000\004\045\057\001\002\000\004" +
    "\024\060\001\002\000\022\005\007\022\025\024\064\026" +
    "\011\030\061\047\014\050\004\051\022\001\002\000\022" +
    "\005\007\022\025\024\064\026\011\030\061\047\014\050" +
    "\004\051\022\001\002\000\026\004\027\005\030\006\032" +
    "\007\031\031\077\032\101\033\076\034\100\037\102\040" +
    "\103\001\002\000\010\025\112\035\067\036\070\001\002" +
    "\000\022\005\007\022\025\024\064\026\011\030\061\047" +
    "\014\050\004\051\022\001\002\000\030\004\027\005\030" +
    "\006\032\007\031\025\033\031\077\032\101\033\076\034" +
    "\100\037\102\040\103\001\002\000\010\025\071\035\067" +
    "\036\070\001\002\000\022\005\uffc5\022\uffc5\024\uffc5\026" +
    "\uffc5\030\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\022" +
    "\005\uffc7\022\uffc7\024\uffc7\026\uffc7\030\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\001\002\000\012\021\uffc3\025\uffc3\035\uffc3" +
    "\036\uffc3\001\002\000\022\005\007\022\025\024\064\026" +
    "\011\030\061\047\014\050\004\051\022\001\002\000\012" +
    "\021\uffc6\025\uffc6\035\uffc6\036\uffc6\001\002\000\022\005" +
    "\007\022\025\024\064\026\011\030\061\047\014\050\004" +
    "\051\022\001\002\000\012\021\uffc4\025\uffc4\035\uffc4\036" +
    "\070\001\002\000\020\005\007\022\025\024\024\026\011" +
    "\047\014\050\004\051\022\001\002\000\020\005\007\022" +
    "\025\024\024\026\011\047\014\050\004\051\022\001\002" +
    "\000\020\005\007\022\025\024\024\026\011\047\014\050" +
    "\004\051\022\001\002\000\020\005\007\022\025\024\024" +
    "\026\011\047\014\050\004\051\022\001\002\000\020\005" +
    "\007\022\025\024\024\026\011\047\014\050\004\051\022" +
    "\001\002\000\020\005\007\022\025\024\024\026\011\047" +
    "\014\050\004\051\022\001\002\000\022\004\027\005\030" +
    "\006\032\007\031\021\uffcd\025\uffcd\035\uffcd\036\uffcd\001" +
    "\002\000\022\004\027\005\030\006\032\007\031\021\uffce" +
    "\025\uffce\035\uffce\036\uffce\001\002\000\022\004\027\005" +
    "\030\006\032\007\031\021\uffca\025\uffca\035\uffca\036\uffca" +
    "\001\002\000\022\004\027\005\030\006\032\007\031\021" +
    "\uffc9\025\uffc9\035\uffc9\036\uffc9\001\002\000\022\004\027" +
    "\005\030\006\032\007\031\021\uffcc\025\uffcc\035\uffcc\036" +
    "\uffcc\001\002\000\022\004\027\005\030\006\032\007\031" +
    "\021\uffcb\025\uffcb\035\uffcb\036\uffcb\001\002\000\004\021" +
    "\113\001\002\000\042\002\ufff5\005\ufff5\014\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\026\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\001\002" +
    "\000\012\021\uffc8\025\uffc8\035\067\036\070\001\002\000" +
    "\020\005\007\022\025\024\024\026\011\047\014\050\004" +
    "\051\022\001\002\000\014\004\027\005\030\006\032\007" +
    "\031\025\117\001\002\000\004\021\120\001\002\000\042" +
    "\002\uffef\005\uffef\014\uffef\022\uffef\023\uffef\024\uffef\026" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\001\002\000\004\047\123\001" +
    "\002\000\042\002\ufffd\005\ufffd\014\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\026\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002\000\006" +
    "\021\uffe5\027\uffe5\001\002\000\042\002\ufffe\005\ufffe\014" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\001\002\000\022\005\007\022\025\024\064\026\011" +
    "\030\061\047\014\050\004\051\022\001\002\000\010\025" +
    "\127\035\067\036\070\001\002\000\034\005\ufffc\014\ufffc" +
    "\022\ufffc\024\ufffc\026\ufffc\041\ufffc\042\ufffc\043\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002\000\034" +
    "\005\007\014\012\022\005\024\024\026\011\041\021\042" +
    "\010\043\015\045\006\046\023\047\014\050\004\051\022" +
    "\001\002\000\042\002\uffed\005\uffed\014\uffed\022\uffed\023" +
    "\uffed\024\uffed\026\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001\002\000" +
    "\042\002\ufffb\005\ufffb\014\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\026\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000\042\002\uffeb" +
    "\005\uffeb\014\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\134\045\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\001\002\000\034\005\007\014\012\022" +
    "\005\024\024\026\011\041\021\042\010\043\015\045\006" +
    "\046\023\047\014\050\004\051\022\001\002\000\042\002" +
    "\ufffa\005\ufffa\014\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\001\002\000\042\002\uffec\005\uffec" +
    "\014\uffec\022\uffec\023\uffec\024\uffec\026\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\001\002\000\004\022\162\001\002\000\004\022" +
    "\157\001\002\000\006\022\154\050\153\001\002\000\004" +
    "\022\150\001\002\000\020\005\007\022\144\024\024\026" +
    "\011\047\014\050\004\051\022\001\002\000\020\005\007" +
    "\022\025\024\024\026\011\047\014\050\004\051\022\001" +
    "\002\000\042\004\027\005\030\006\032\007\031\021\uffd6" +
    "\023\uffd6\025\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002\000\004" +
    "\023\147\001\002\000\042\004\046\005\uffd5\006\047\007" +
    "\uffd5\021\uffd5\023\uffd5\025\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001" +
    "\002\000\020\005\007\022\025\024\024\026\011\047\014" +
    "\050\004\051\022\001\002\000\004\023\152\001\002\000" +
    "\042\004\uffe1\005\uffe1\006\uffe1\007\uffe1\021\uffe1\023\uffe1" +
    "\025\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000\042\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\021\uffda\023\uffda\025\uffda\027" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\001\002\000\020\005\007\022\025\024" +
    "\024\026\011\047\014\050\004\051\022\001\002\000\004" +
    "\023\156\001\002\000\042\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\021\uffd9\023\uffd9\025\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001" +
    "\002\000\020\005\007\022\025\024\024\026\011\047\014" +
    "\050\004\051\022\001\002\000\004\023\161\001\002\000" +
    "\042\004\uffd7\005\uffd7\006\uffd7\007\uffd7\021\uffd7\023\uffd7" +
    "\025\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\001\002\000\020\005\007" +
    "\022\025\024\024\026\011\047\014\050\004\051\022\001" +
    "\002\000\004\023\164\001\002\000\042\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\021\uffd8\023\uffd8\025\uffd8\027\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\001\002\000\004\002\000\001\002\000\040\002" +
    "\001\005\001\014\001\022\001\023\001\024\001\026\001" +
    "\041\001\042\001\043\001\045\001\046\001\047\001\050" +
    "\001\051\001\001\002\000\004\047\173\001\002\000\004" +
    "\047\uffe8\001\002\000\004\047\uffe9\001\002\000\004\047" +
    "\uffea\001\002\000\006\021\uffe6\027\uffe6\001\002\000\004" +
    "\026\175\001\002\000\042\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\021\uffd2\023\uffd2\025\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\001" +
    "\002\000\020\005\007\022\025\024\024\026\011\047\014" +
    "\050\004\051\022\001\002\000\014\004\027\005\030\006" +
    "\032\007\031\021\200\001\002\000\022\005\uffed\022\uffed" +
    "\024\uffed\026\uffed\030\uffed\047\uffed\050\uffed\051\uffed\001" +
    "\002\000\022\005\ufff4\022\ufff4\024\ufff4\026\ufff4\030\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\001\002\000\022\005\007\022" +
    "\025\024\064\026\011\030\061\047\014\050\004\051\022" +
    "\001\002\000\010\021\204\035\067\036\070\001\002\000" +
    "\020\005\uffed\022\uffed\024\uffed\026\uffed\047\uffed\050\uffed" +
    "\051\uffed\001\002\000\020\005\ufff3\022\ufff3\024\ufff3\026" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002\000\020\005\007" +
    "\022\025\024\024\026\011\047\014\050\004\051\022\001" +
    "\002\000\014\004\027\005\030\006\032\007\031\025\ufff2" +
    "\001\002\000\004\025\211\001\002\000\034\005\ufff1\014" +
    "\ufff1\022\ufff1\024\ufff1\026\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\001\002\000" +
    "\034\005\007\014\012\022\005\024\024\026\011\041\021" +
    "\042\010\043\015\045\006\046\023\047\014\050\004\051" +
    "\022\001\002\000\042\002\ufff0\005\ufff0\014\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\026\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002" +
    "\000\042\004\uffdc\005\uffdc\006\uffdc\007\uffdc\021\uffdc\023" +
    "\uffdc\025\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000\022\005" +
    "\uffed\022\uffed\024\uffed\026\uffed\030\uffed\047\uffed\050\uffed" +
    "\051\uffed\001\002\000\022\005\ufff9\022\ufff9\024\ufff9\026" +
    "\ufff9\030\ufff9\047\ufff9\050\ufff9\051\ufff9\001\002\000\022" +
    "\005\007\022\025\024\064\026\011\030\061\047\014\050" +
    "\004\051\022\001\002\000\010\025\221\035\067\036\070" +
    "\001\002\000\034\005\ufff8\014\ufff8\022\ufff8\024\ufff8\026" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\001\002\000\034\005\007\014\012\022" +
    "\005\024\024\026\011\041\021\042\010\043\015\045\006" +
    "\046\023\047\014\050\004\051\022\001\002\000\042\002" +
    "\ufff7\005\ufff7\014\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\001\002\000\020\004\027\005\030" +
    "\006\032\007\031\021\124\023\uffcf\027\043\001\002\000" +
    "\036\005\007\014\012\022\005\023\226\024\024\026\011" +
    "\041\021\042\010\043\015\045\006\046\023\047\014\050" +
    "\004\051\022\001\002\000\042\002\uffee\005\uffee\014\uffee" +
    "\022\uffee\023\uffee\024\uffee\026\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\012\002\012\003\016\004\015\007\017\001" +
    "\001\000\002\001\001\000\014\002\224\003\016\004\223" +
    "\007\017\012\051\001\001\000\002\001\001\000\004\004" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\166\001\001\000\010\003\165\004\015\007\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\053\001\001\000\004\004\025" +
    "\001\001\000\006\004\041\012\051\001\001\000\002\001" +
    "\001\000\004\004\037\001\001\000\004\004\035\001\001" +
    "\000\004\004\034\001\001\000\004\004\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\041\012\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\041" +
    "\012\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\054\001\001\000\010\003\055\004\015\007\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\061\010\062\001\001\000\006\004\061\010\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\064\010" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\073\001\001\000\004\024\071\001\001\000\002\001" +
    "\001\000\006\004\061\010\072\001\001\000\002\001\001" +
    "\000\006\004\061\010\074\001\001\000\002\001\001\000" +
    "\004\004\110\001\001\000\004\004\107\001\001\000\004" +
    "\004\106\001\001\000\004\004\105\001\001\000\004\004" +
    "\104\001\001\000\004\004\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\061\010\125\001\001\000\002\001\001" +
    "\000\004\013\127\001\001\000\010\003\130\004\015\007" +
    "\017\001\001\000\004\005\131\001\001\000\004\014\132" +
    "\001\001\000\004\011\134\001\001\000\010\003\135\004" +
    "\015\007\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\144\001\001\000\006\004\041" +
    "\012\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\041\012\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\041\012\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\041\012\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\041\012\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\176\001\001\000\002\001\001" +
    "\000\004\005\200\001\001\000\004\020\201\001\001\000" +
    "\006\004\061\010\202\001\001\000\002\001\001\000\004" +
    "\005\204\001\001\000\004\021\205\001\001\000\004\004" +
    "\206\001\001\000\004\022\207\001\001\000\002\001\001" +
    "\000\004\023\211\001\001\000\010\003\212\004\015\007" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\215\001\001\000\004\015\216\001\001\000\006\004" +
    "\061\010\217\001\001\000\002\001\001\000\004\016\221" +
    "\001\001\000\010\003\222\004\015\007\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\165\004\015" +
    "\007\017\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  VariablesTabla variables = new VariablesTabla();


  int numVar = -1;

  public String newVar(){
      numVar++;
      return "$t"+Integer.toString(numVar);
  }


  int numSaltos = -1;

  public String newSalt(){
      numSaltos++;
      return "L"+Integer.toString(numSaltos);
  }

  public String currentSalt(){
      return "L"+Integer.toString(numSaltos);
  }


  public class saltosCond{
      public String sv, sf;

      public saltosCond(String sv, String sf){
          this.sv = sv;
          this.sf = sf;
      }
  }

  int tamSet=0;

  public String asignar(String v1, String v2){
    String var10 = newVar();
    PLXC.out.println("\t$"+var10+"_length=0;");
    String var11 = newVar();
    PLXC.out.println("\t"+var11+"=0;");
    String salto12 = newSalt(), salto13=newSalt(),salto14=newSalt();
    PLXC.out.println(salto12+":");
    PLXC.out.println("\tif ("+var11+"<$"+v1+"_length) goto "+salto13+";");
    PLXC.out.println("\tgoto "+salto14+";");
    PLXC.out.println(salto13+" :");
    String var12 = newVar(), var13= newVar();
    PLXC.out.println("\t"+var12+"="+v1+"["+var11+"];");
    PLXC.out.println("\t"+var13+"=0;");
    String salto15 = newSalt();
    PLXC.out.println(salto15+":");
    String salto16 = newSalt(), salto17=newSalt();
    PLXC.out.println("\tif ("+var13+"==$"+var10+"_length) goto "+salto16+";");
    String var14 = newVar();
    PLXC.out.println("\t"+var14+"="+var10+"["+var13+"];");
    PLXC.out.println("\tif ("+var14+"=="+var12+") goto "+salto17+";");
    PLXC.out.println("\t"+var13+"="+var13+"+1;");
    PLXC.out.println("\tgoto "+salto15+";");
    PLXC.out.println(salto16+":");
    PLXC.out.println("\t"+var10+"[$"+var10+"_length]="+var12+";");
    PLXC.out.println("\t$"+var10+"_length=$"+var10+"_length+1;");
    PLXC.out.println(salto17+":");
    PLXC.out.println("\t"+var11+"="+var11+"+1;");
    PLXC.out.println("\tgoto "+salto12+";");
    PLXC.out.println(salto14+":");
    String var15 = newVar();
    PLXC.out.println("\t"+var15+"=0;");
    String salto18 = newSalt(), salto19=newSalt(),salto20=newSalt();
    PLXC.out.println(salto18+":");
    PLXC.out.println("\tif ("+var15+"<$"+v2+"_length) goto "+salto19+";");
    PLXC.out.println("\tgoto "+salto20+";");
    PLXC.out.println(salto19+" :");
    String var16 = newVar(), var17= newVar();
    PLXC.out.println("\t"+var16+"="+v2+"["+var15+"];");
    PLXC.out.println("\t"+var17+"=0;");
    String salto21 = newSalt();
    PLXC.out.println(salto21+":");
    String salto22 = newSalt(), salto23=newSalt();
    PLXC.out.println("\tif ("+var17+"==$"+var10+"_length) goto "+salto22+";");
    String var18 = newVar();
    PLXC.out.println("\t"+var18+"="+var10+"["+var17+"];");
    PLXC.out.println("\tif ("+var18+"=="+var16+") goto "+salto23+";");
    PLXC.out.println("\t"+var17+"="+var17+"+1;");
    PLXC.out.println("\tgoto "+salto21+";");
    PLXC.out.println(salto22+":");
    PLXC.out.println("\t"+var10+"[$"+var10+"_length]="+var16+";");
    PLXC.out.println("\t$"+var10+"_length=$"+var10+"_length+1;");
    PLXC.out.println(salto23+":");
    PLXC.out.println("\t"+var15+"="+var15+"+1;");
    PLXC.out.println("\tgoto "+salto18+";");
    PLXC.out.println(salto20+":");
    return var10;
  }

  public String asignarSetSuelto(String v1, String v2, int tam){
    String var10 = newVar();
    PLXC.out.println("\t$"+var10+"_length=0;");
    String var11 = newVar();
    PLXC.out.println("\t"+var11+"=0;");
    String salto12 = newSalt(), salto13=newSalt(),salto14=newSalt();
    PLXC.out.println(salto12+":");
    PLXC.out.println("\tif ("+var11+"<$"+v1+"_length) goto "+salto13+";");
    PLXC.out.println("\tgoto "+salto14+";");
    PLXC.out.println(salto13+" :");
    String var12 = newVar(), var13= newVar();
    PLXC.out.println("\t"+var12+"="+v1+"["+var11+"];");
    PLXC.out.println("\t"+var13+"=0;");
    String salto15 = newSalt();
    PLXC.out.println(salto15+":");
    String salto16 = newSalt(), salto17=newSalt();
    PLXC.out.println("\tif ("+var13+"==$"+var10+"_length) goto "+salto16+";");
    String var14 = newVar();
    PLXC.out.println("\t"+var14+"="+var10+"["+var13+"];");
    PLXC.out.println("\tif ("+var14+"=="+var12+") goto "+salto17+";");
    PLXC.out.println("\t"+var13+"="+var13+"+1;");
    PLXC.out.println("\tgoto "+salto15+";");
    PLXC.out.println(salto16+":");
    PLXC.out.println("\t"+var10+"[$"+var10+"_length]="+var12+";");
    PLXC.out.println("\t$"+var10+"_length=$"+var10+"_length+1;");
    PLXC.out.println(salto17+":");
    PLXC.out.println("\t"+var11+"="+var11+"+1;");
    PLXC.out.println("\tgoto "+salto12+";");
    PLXC.out.println(salto14+":");
    String var15 = newVar();
    PLXC.out.println("\t"+var15+"=0;");
    String salto18 = newSalt(), salto19=newSalt(),salto20=newSalt();
    PLXC.out.println(salto18+":");
    PLXC.out.println("\tif ("+var15+"<"+tam+") goto "+salto19+";");
    PLXC.out.println("\tgoto "+salto20+";");
    PLXC.out.println(salto19+" :");
    String var16 = newVar(), var17= newVar();
    PLXC.out.println("\t"+var16+"="+v2+"["+var15+"];");
    PLXC.out.println("\t"+var17+"=0;");
    String salto21 = newSalt();
    PLXC.out.println(salto21+":");
    String salto22 = newSalt(), salto23=newSalt();
    PLXC.out.println("\tif ("+var17+"==$"+var10+"_length) goto "+salto22+";");
    String var18 = newVar();
    PLXC.out.println("\t"+var18+"="+var10+"["+var17+"];");
    PLXC.out.println("\tif ("+var18+"=="+var16+") goto "+salto23+";");
    PLXC.out.println("\t"+var17+"="+var17+"+1;");
    PLXC.out.println("\tgoto "+salto21+";");
    PLXC.out.println(salto22+":");
    PLXC.out.println("\t"+var10+"[$"+var10+"_length]="+var16+";");
    PLXC.out.println("\t$"+var10+"_length=$"+var10+"_length+1;");
    PLXC.out.println(salto23+":");
    PLXC.out.println("\t"+var15+"="+var15+"+1;");
    PLXC.out.println("\tgoto "+salto18+";");
    PLXC.out.println(salto20+":");
    return var10;
  }


  public String asignarPor(String v1, String v2, int size){
    String salto6 = newSalt();
    String salto11 = newSalt();
    String var7 = newVar(), var8 = newVar(), var9 = newVar();
    PLXC.out.println(salto6+":");
    PLXC.out.println("\tif ("+var7+"==$"+v1+"_length) goto "+salto11+";");
    PLXC.out.println("\t"+var9+"="+v1+"["+var7+"];");
    PLXC.out.println("\t"+var8+"=0;");
    String salto8 = newSalt(), salto9= newSalt(), salto10=newSalt();
    String var10 = newVar(), var6 = newVar();
    PLXC.out.println(salto8+":");
    PLXC.out.println("\tif ("+var8+"=="+size+") goto "+salto10+";");
    PLXC.out.println("\t"+var10+"="+v2+"["+var8+"];");
    PLXC.out.println("\tif ("+var9+"=="+var10+") goto "+salto9+";");
    PLXC.out.println("\t"+var8+"="+var8+"+1;");
    PLXC.out.println("\tgoto "+salto8+";");
    PLXC.out.println(salto9+":");
    PLXC.out.println("\t"+var6+"[$"+var6+"_length]="+var9+";");
    PLXC.out.println("\t$"+var6+"_length=$"+var6+"_length+1;");
    PLXC.out.println(salto10+":");
    PLXC.out.println("\t"+var7+"="+var7+"+1;");
    PLXC.out.println("\tgoto "+salto6+";");
    PLXC.out.println(salto11+":");
    return var6;
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaSent ::= listaSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaSent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= crearSet PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= IF AP condicion CP NT$0 sent saltos NT$1 elseornot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= WHILE AP saltos NT$2 condicion CP NT$3 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= DO saltos NT$4 sent WHILE AP condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println(v.sv+":"); PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v1+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
PLXC.out.println("\tgoto "+v1+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
PLXC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent ::= FOR AP expresion PYC saltos NT$5 condicion PYC saltos NT$6 expresion NT$7 CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= PRINT AP expresion CP PYC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		try{
                                          PLXC.out.println("\tprint "+Integer.valueOf(v)+";");
                                        }catch(Exception e){
                                          if(v.substring(0,1)=="$"){
                                          PLXC.out.println("\tprint "+v+";");
                                        }else{
                                          if(variables.contiene(v) && !variables.getTipo(v).contains("set")){
                                            PLXC.out.println("\tprint "+v+";");
                                          }else{
                                            String var5 = newVar();
                                            PLXC.out.println("\t"+var5+"=0;");
                                            String salto6=newSalt(), salto7=newSalt(), salto8=newSalt();
                                            PLXC.out.println(salto6+":");
                                            PLXC.out.println("\tif ("+var5+"<$"+v+"_length) goto "+salto7+";");
                                            PLXC.out.println("\tgoto "+salto8+";");
                                            PLXC.out.println(salto7+":");
                                            String var6 = newVar();
                                            PLXC.out.println("\t"+var6+"="+v+"["+var5+"];");
                                            if(variables.getTipo(v).contains("int")||variables.getTipo(v).contains("float")){
                                              PLXC.out.println("\twrite "+var6+";");
                                            }else if(variables.getTipo(v).contains("char")){
                                              PLXC.out.println("\twritec "+var6+";");
                                            }
                                            
                                            PLXC.out.println("\twritec 32;");
                                            PLXC.out.println("\t"+var5+"="+var5+"+1;");
                                            PLXC.out.println("\tgoto "+salto6+";");
                                            PLXC.out.println(salto8+":");
                                            PLXC.out.println("\twritec 10;");
                                            
                                          }
                                        }
                                        
                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= AL listaSent CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // saltos ::= 
            {
              String RESULT =null;
		RESULT= newSalt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseornot ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseornot ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= INT 
            {
              String RESULT =null;
		RESULT="int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= CHAR 
            {
              String RESULT =null;
		RESULT="char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= FLOAT 
            {
              String RESULT =null;
		RESULT="float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // crearSet ::= SET tipo STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		variables.introduceSet(a,v);RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearSet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // crearSet ::= crearSet COMA STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		variables.introduceSet(a,v);RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearSet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion MAS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(variables.contiene(v1)&&variables.contiene(v2)&&variables.getTipo(v1).contains("set")&&variables.getTipo(v2).contains("set")&&variables.getTipo(v1).equals(variables.getTipo(v2))){
                                                    String devolver = asignar(v1,v2);
                                                    RESULT=devolver;
                                                  }else{
                                                    String var = newVar(); 
                                                    PLXC.out.println("\t"+var+"="+v1+"+"+v2+";");
                                                    RESULT=var;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MAS AL valoresSet CL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String t5 = newVar();
                                                      for(int i = 0; i<v2.size();i++){
                                                        PLXC.out.println("\t"+t5+"["+i+"]="+v2.get(i)+";");
                                                      }
                                                      String devolver = asignarSetSuelto(v1, t5, v2.size());
                                                      RESULT=devolver;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= AL valoresSet CL MAS expresion 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> v2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String t5 = newVar();
                                                      for(int i = 0; i<v2.size();i++){
                                                        PLXC.out.println("\t"+t5+"["+i+"]="+v2.get(i)+";");
                                                      }
                                                      String devolver = asignarSetSuelto(v1, t5, v2.size());
                                                      RESULT=devolver;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= STRING POR AL valoresSet CL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String t5 = newVar();
                                                      for(int i = 0; i<v2.size();i++){
                                                        PLXC.out.println("\t"+t5+"["+i+"]="+v2.get(i)+";");
                                                      }
                                                      String devolver = asignarPor(v1, t5, v2.size());
                                                      RESULT=devolver;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= AL valoresSet CL POR STRING 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> v2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String t5 = newVar();
                                                      for(int i = 0; i<v2.size();i++){
                                                        PLXC.out.println("\t"+t5+"["+i+"]="+v2.get(i)+";");
                                                      }
                                                      String devolver = asignarPor(v1, t5, v2.size());
                                                      RESULT=devolver;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion POR expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"*"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion DIV expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"/"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= MENOS expresion 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"=0-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= AP expresion CP 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= STRING MIGUAL NUM 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var5 = newVar();
                                                  String salto6 = newSalt();
                                                  PLXC.out.println("\t"+var5+"=0;");
                                                  PLXC.out.println(salto6+":");
                                                  String salto7 = newSalt(), salto8=newSalt();
                                                  String var6 = newVar();
                                                  PLXC.out.println("\tif ("+var5+"==$"+s+"_length) goto "+salto7+";");
                                                  PLXC.out.println("\t"+var6+"="+s+"["+var5+"];");
                                                  PLXC.out.println("\tif ("+var6+"=="+v+") goto "+salto8+";");
                                                  PLXC.out.println("\t"+var5+"="+var5+"+1;");
                                                  PLXC.out.println("\tgoto "+salto6+";");
                                                  PLXC.out.println(salto7+":");
                                                  PLXC.out.println("\t"+s+"[$"+s+"_length]="+v+";");
                                                  PLXC.out.println("\t$"+s+"_length=$"+s+"_length+1;");
                                                  PLXC.out.println(salto8+":");
                                                  RESULT=s;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= STRING MIGUAL AL valoresSet CL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String var5 = newVar();
                                                    for(int i = 0; i<v.size(); i++){
                                                      PLXC.out.println("\t"+var5+"["+i+"]="+v.get(i)+";");
                                                    }
                                                  String salto6 = newSalt();
                                                  String var6 = newVar();
                                                  PLXC.out.println("\t"+var6+"=0;");
                                                  PLXC.out.println(salto6+":");
                                                  String salto7 = newSalt(), salto8=newSalt();
                                                  PLXC.out.println("\tif ("+var6+"<"+v.size()+") goto "+salto7+";");
                                                  PLXC.out.println("\tgoto "+salto8+";");
                                                  PLXC.out.println(salto7+":");
                                                  String var7 = newVar(), var8 = newVar();
                                                  PLXC.out.println("\t"+var7+"="+var5+"["+var6+"];");
                                                  PLXC.out.println("\t"+var8+"=0;");
                                                  String salto9 = newSalt();
                                                  PLXC.out.println(salto9+":");
                                                  String salto10 = newSalt(), salto11 = newSalt();
                                                  PLXC.out.println("\tif ("+var8+"==$"+s+"_length) goto "+salto10+";");
                                                  String var9 = newVar();
                                                  PLXC.out.println("\t"+var9+"="+s+"["+var8+"];");
                                                  PLXC.out.println("\tif ("+var9+"=="+var7+") goto "+salto11+";");
                                                  PLXC.out.println("\t"+var8+"="+var8+"+1;");
                                                  PLXC.out.println("\tgoto "+var9+";");
                                                  PLXC.out.println(salto10+":");
                                                  PLXC.out.println("\t"+s+"[$"+s+"_length]="+var7+";");
                                                  PLXC.out.println("\t$"+s+"_length=$"+s+"_length+1;");
                                                  PLXC.out.println(salto11+":");
                                                  PLXC.out.println("\t"+var6+"="+var6+"+1;");
                                                  PLXC.out.println("goto "+salto6+";");
                                                  PLXC.out.println(salto8+":");
                                                  RESULT=s;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= STRING RIGUAL AL valoresSet CL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String var5 = newVar();
                                                    Collections.reverse(v);
                                                    for(int i = 0; i<v.size(); i++){
                                                      PLXC.out.println("\t"+var5+"["+i+"]="+v.get(i)+";");
                                                    }
                                                    String salto6=newSalt(), salto7=newSalt(), salto8=newSalt(), salto9=newSalt(), salto10=newSalt(), salto11=newSalt(), salto12=newSalt();
                                                    String var6=newVar(), var7=newVar(), var8=newVar(), var9=newVar(), var10=newVar();
                                                    PLXC.out.println(salto6+":");
                                                    PLXC.out.println("\tif ("+var6+"<"+v.size()+") goto "+salto7+";");
                                                    PLXC.out.println("\tgoto "+salto8+";");
                                                    PLXC.out.println(salto7+":");
                                                    PLXC.out.println("\t"+var7+"="+var5+"["+var6+"];");
                                                    PLXC.out.println("\t"+var8+"=0;");
                                                    PLXC.out.println(salto9+":");
                                                    PLXC.out.println("\tif ($"+s+"_length=="+var8+") goto "+salto11+";");
                                                    PLXC.out.println("\t"+var10+"="+s+"["+var8+"];");
                                                    PLXC.out.println("\tif ("+var10+"=="+var7+") goto "+salto12+";");
                                                    PLXC.out.println("\t"+var8+"="+var8+"+1;");
                                                    PLXC.out.println("\tgoto "+salto9+";");
                                                    PLXC.out.println(salto12+":");
                                                    PLXC.out.println("\t$"+s+"_length=$"+s+"_length-1;");
                                                    PLXC.out.println(salto10+":");
                                                    PLXC.out.println("\tif ($"+s+"_length=="+var8+") goto "+salto11+";");
                                                    PLXC.out.println("\t"+var9+"="+var8+";");
                                                    PLXC.out.println("\t"+var8+"="+var8+"+1;");
                                                    PLXC.out.println("\t"+var10+"="+s+"["+var8+"];");
                                                    PLXC.out.println("\t"+s+"["+var9+"]="+var10+";");
                                                    PLXC.out.println("\tgoto "+salto10+";");
                                                    PLXC.out.println(salto11+":");
                                                    PLXC.out.println("\t"+var6+"="+var6+"+1;");
                                                    PLXC.out.println("\tgoto "+salto6+";");
                                                    PLXC.out.println(salto8+":");

                                                  
                                                  RESULT=s;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= STRING PIGUAL AL valoresSet CL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String var5 = newVar();
                                                    Collections.reverse(v);
                                                    for(int i = 0; i<v.size(); i++){
                                                      PLXC.out.println("\t"+var5+"["+i+"]="+v.get(i)+";");
                                                    }
                                                  String salto6=newSalt(), salto7=newSalt(), salto8=newSalt(), salto9=newSalt(), salto10=newSalt(), salto11=newSalt(), salto12=newSalt(), salto13=newSalt(), salto14=newSalt(), salto15=newSalt(), salto16=newSalt(), salto17=newSalt();
                                                  String var6=newVar(), var7=newVar(), var8=newVar(), var9=newVar(), var10=newVar(), var11=newVar(), var12=newVar(), var13=newVar(), var14=newVar();
                                                  PLXC.out.println(salto6+":");
                                                  PLXC.out.println("\tif ("+var7+"==$"+s+"_length) goto "+salto11+";");
                                                  PLXC.out.println("\t"+var9+"="+s+"["+var7+"];");
                                                  PLXC.out.println("\t"+var8+"=0;");
                                                  PLXC.out.println(salto8+":");
                                                  PLXC.out.println("\tif ("+var8+"=="+v.size()+") goto "+salto10+";");
                                                  PLXC.out.println("\t"+var10+"="+var5+"["+var8+"];");
                                                  PLXC.out.println("\tif ("+var9+"=="+var10+") goto "+salto9+";");
                                                  PLXC.out.println("\t"+var8+"="+var8+"+1;");
                                                  PLXC.out.println("\tgoto "+salto8+";");
                                                  PLXC.out.println(salto9+":");
                                                  PLXC.out.println("\t"+var6+"[$"+var6+"_length]="+var9+";");
                                                  PLXC.out.println("\t$"+var6+"_length="+"$"+var6+"_length+1;");
                                                  PLXC.out.println(salto10+":");
                                                  PLXC.out.println("\t"+var7+"="+var7+"+1;");
                                                  PLXC.out.println("\tgoto "+salto6+";");
                                                  PLXC.out.println(salto11+":");
                                                  PLXC.out.println("\t$"+s+"_length=0;");
                                                  PLXC.out.println("\t"+var11+"=0;");
                                                  PLXC.out.println(salto12+":");
                                                  PLXC.out.println("\tif ("+var11+"<$"+var6+"_length) goto "+salto13+";");
                                                  PLXC.out.println("\tgoto "+salto14+";");
                                                  PLXC.out.println(salto13+":");
                                                  PLXC.out.println("\t"+var12+"="+var6+"["+var11+"];");
                                                  PLXC.out.println("\t"+var13+"=0;");
                                                  PLXC.out.println(salto15+":");
                                                  PLXC.out.println("\tif ("+var13+"==$"+s+"_length) goto "+salto16+";");
                                                  PLXC.out.println("\t"+var14+"="+s+"["+var13+"];");
                                                  PLXC.out.println("\tif ("+var14+"=="+var12+") goto "+salto17+";");
                                                  PLXC.out.println("\t"+var13+"="+var13+"+1;");
                                                  PLXC.out.println("\tgoto "+salto15+";");
                                                  PLXC.out.println(salto16+":");
                                                  PLXC.out.println("\t"+s+"[$"+s+"_length]="+var12+";");
                                                  PLXC.out.println("\t$"+s+"_length=$"+s+"_length+1;");
                                                  PLXC.out.println(salto17+":");
                                                  PLXC.out.println("\t"+var11+"="+var11+"+1;");
                                                  PLXC.out.println("\tgoto "+salto12+";");
                                                  PLXC.out.println(salto14+":");
                                                  RESULT=s;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= STRING ASIG expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{
                                                    PLXC.out.println("\t"+v1+"="+Integer.valueOf(v2)+";");
                                                  }catch(Exception e){
                                                    if(variables.contiene(v1)&&variables.getTipo(v1).contains("set")&&v2.substring(0,1).equals("$")){
                                                      PLXC.out.println("\t$"+v1+"_length=$"+v2+"_length;");
                                                      PLXC.out.println("\t"+v1+"="+v2+";");
                                                    }else
                                                    if(v2.substring(0,1).equals("$")){
                                                      PLXC.out.println("\t"+v1+"="+v2+";");
                                                    }else{
                                                      if(!variables.getTipo(v1).equalsIgnoreCase(variables.getTipo(v2))){
                                                        System.exit(1);
                                                      }else{
                                                        if(variables.contiene(v1) && !variables.getTipo(v1).contains("set")){
                                                          PLXC.out.println("\t"+v1+"="+v2+";");
                                                        }else{
                                                          PLXC.out.println("\t$"+v1+"_length=$"+v2+"_length;");
                                                          PLXC.out.println("\t"+v1+"="+v2+";");
                                                        }
                                                      }
                                                  }}
                                                  RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= STRING ASIG AL valoresSet CL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Collections.reverse(vs);
                                                    if(variables.getTipo(v1).contains("int")||variables.getTipo(v1).contains("char")){
                                                        try{
                                                          for(int i = 0; i<vs.size();i++){
                                                            Integer.parseInt(vs.get(i));
                                                          }
                                                        }catch(Exception e){
                                                          PLXC.out.println("\terror;");
                                                          System.exit(1);
                                                        }
                                                      }else{
                                                          try{
                                                          for(int i = 0; i<vs.size();i++){
                                                            Float.parseFloat(vs.get(i));
                                                          }
                                                        }catch(Exception e){
                                                          PLXC.out.println("\terror;");
                                                          System.exit(1);
                                                        }
                                                      }
                                                    String varTemp = newVar();
                                                    for(int i=0; i<vs.size();i++){
                                                      PLXC.out.println("\t"+varTemp+"["+i+"]= "+vs.get(i)+";");
                                                    }
                                                    PLXC.out.println("\t$"+v1+"_length=0;");
                                                    String iterador = newVar();
                                                    PLXC.out.println("\t"+iterador+"=0;");
                                                    String saltoInicial = newSalt();
                                                    PLXC.out.println(saltoInicial+":");
                                                    String sv1 = newSalt();
                                                    String sf1 = newSalt();
                                                    PLXC.out.println("\tif ("+iterador+"<"+vs.size()+") goto "+sv1+";");
                                                    PLXC.out.println("\tgoto "+sf1+";");
                                                    PLXC.out.println(sv1+":");
                                                    String varTemp2 = newVar();
                                                    String varTemp3 = newVar();
                                                    PLXC.out.println("\t"+varTemp2+"="+varTemp+"["+iterador+"];");
                                                    PLXC.out.println("\t"+varTemp3+"=0;");
                                                    String salto3 = newSalt();
                                                    String salto4 = newSalt();
                                                    PLXC.out.println(salto3+":");
                                                    PLXC.out.println("\tif ("+varTemp3+"==$"+v1+"_length) goto "+salto4+";");
                                                    String varTemp4 = newVar();
                                                    PLXC.out.println("\t"+varTemp4+"="+v1+"["+varTemp3+"];");
                                                    String salto5 = newSalt();
                                                    PLXC.out.println("\tif ("+varTemp4+"=="+varTemp2+") goto "+salto5+";");
                                                    PLXC.out.println("\t"+varTemp3+"="+varTemp3+"+1;");
                                                    PLXC.out.println("\tgoto "+salto3+";");
                                                    PLXC.out.println(salto4+":");
                                                    PLXC.out.println("\t"+v1+"[$"+v1+"_length]="+varTemp2+";");
                                                    PLXC.out.println("\t$"+v1+"_length=$"+v1+"_length+1;");
                                                    PLXC.out.println(salto5+":");
                                                    PLXC.out.println("\t"+iterador+"="+iterador+"+1;");
                                                    PLXC.out.println("\tgoto "+saltoInicial+";");
                                                    PLXC.out.println(sf1+":");
                                            
                                                  RESULT=v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= NUM 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= APOSTROFE STRING APOSTROFE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Integer.toString(v.codePointAt(0));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= DEC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valoresSet ::= expresion COMA valoresSet 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		v.add(e); RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSet",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valoresSet ::= expresion 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>();
                             l.add(e);
                             RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresSet",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= expresion IGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"=="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicion ::= expresion DISTINTO expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"!="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= expresion MENOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= expresion MENORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion ::= expresion MAYOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= expresion MAYORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion ::= NEGADO condicion 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new saltosCond(v.sf, v.sv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$9 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion ::= condicion Y NT$9 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(v1.sf+":");
                             PLXC.out.println("\tgoto "+v2.sf+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$10 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= condicion OR NT$10 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(v1.sv+":");
                             PLXC.out.println("\tgoto "+v2.sv+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion ::= AP condicion CP 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
