
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\013\002" +
    "\000\002\014\002\000\002\003\013\000\002\015\002\000" +
    "\002\016\002\000\002\003\012\000\002\017\002\000\002" +
    "\003\013\000\002\020\002\000\002\021\002\000\002\022" +
    "\002\000\002\023\002\000\002\003\021\000\002\003\007" +
    "\000\002\003\006\000\002\012\002\000\002\005\002\000" +
    "\002\007\004\000\002\007\002\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\005\000\002\004\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\011\006\000\002" +
    "\011\007\000\002\011\004\000\002\011\005\000\002\010" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\024\002\000\002\006\006\000\002" +
    "\025\002\000\002\006\006\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\034\005\004\012\020\013\007\016\017\020" +
    "\013\033\021\034\024\035\012\037\010\040\015\041\006" +
    "\042\016\043\014\001\002\000\016\005\004\012\020\013" +
    "\007\020\013\042\016\043\014\001\002\000\004\042\165" +
    "\001\002\000\004\042\uffd8\001\002\000\004\042\164\001" +
    "\002\000\004\020\155\001\002\000\014\004\030\005\031" +
    "\006\033\007\032\014\154\001\002\000\004\020\142\001" +
    "\002\000\016\005\004\012\020\013\007\020\013\042\016" +
    "\043\014\001\002\000\040\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\014\uffdd\015\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\001\002\000" +
    "\034\005\uffec\012\uffec\013\uffec\016\uffec\020\uffec\033\uffec" +
    "\034\uffec\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\001\002\000\046\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\127\012\126\013\125\014\uffe3\015\uffe3\021\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\001\002\000\034\005\uffed\012\uffed\013\uffed\016" +
    "\uffed\020\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\001\002\000\004\042\121\001" +
    "\002\000\004\020\115\001\002\000\006\014\111\015\110" +
    "\001\002\000\036\002\106\005\004\012\020\013\007\016" +
    "\017\020\013\033\021\034\024\035\012\037\010\040\015" +
    "\041\006\042\016\043\014\001\002\000\004\020\026\001" +
    "\002\000\040\002\uffff\005\uffff\012\uffff\013\uffff\016\uffff" +
    "\017\uffff\020\uffff\033\uffff\034\uffff\035\uffff\037\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\001\002\000\016\005\004" +
    "\012\020\013\007\020\013\042\016\043\014\001\002\000" +
    "\014\004\030\005\031\006\033\007\032\014\034\001\002" +
    "\000\016\005\004\012\020\013\007\020\013\042\016\043" +
    "\014\001\002\000\016\005\004\012\020\013\007\020\013" +
    "\042\016\043\014\001\002\000\016\005\004\012\020\013" +
    "\007\020\013\042\016\043\014\001\002\000\016\005\004" +
    "\012\020\013\007\020\013\042\016\043\014\001\002\000" +
    "\020\005\uffec\012\uffec\013\uffec\020\uffec\022\uffec\042\uffec" +
    "\043\uffec\001\002\000\020\005\ufff4\012\ufff4\013\ufff4\020" +
    "\ufff4\022\ufff4\042\ufff4\043\ufff4\001\002\000\020\005\004" +
    "\012\020\013\007\020\042\022\037\042\016\043\014\001" +
    "\002\000\020\005\004\012\020\013\007\020\042\022\037" +
    "\042\016\043\014\001\002\000\026\004\030\005\031\006" +
    "\033\007\032\023\056\024\060\025\054\026\057\031\061" +
    "\032\062\001\002\000\010\014\071\027\045\030\046\001" +
    "\002\000\020\005\004\012\020\013\007\020\042\022\037" +
    "\042\016\043\014\001\002\000\030\004\030\005\031\006" +
    "\033\007\032\021\055\023\056\024\060\025\054\026\057" +
    "\031\061\032\062\001\002\000\010\021\047\027\045\030" +
    "\046\001\002\000\020\005\uffce\012\uffce\013\uffce\020\uffce" +
    "\022\uffce\042\uffce\043\uffce\001\002\000\020\005\uffd0\012" +
    "\uffd0\013\uffd0\020\uffd0\022\uffd0\042\uffd0\043\uffd0\001\002" +
    "\000\012\014\uffcc\021\uffcc\027\uffcc\030\uffcc\001\002\000" +
    "\020\005\004\012\020\013\007\020\042\022\037\042\016" +
    "\043\014\001\002\000\012\014\uffcf\021\uffcf\027\uffcf\030" +
    "\uffcf\001\002\000\020\005\004\012\020\013\007\020\042" +
    "\022\037\042\016\043\014\001\002\000\012\014\uffcd\021" +
    "\uffcd\027\uffcd\030\046\001\002\000\016\005\004\012\020" +
    "\013\007\020\013\042\016\043\014\001\002\000\040\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\014\uffe4\015\uffe4\021\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\001\002\000\016\005\004\012\020\013\007" +
    "\020\013\042\016\043\014\001\002\000\016\005\004\012" +
    "\020\013\007\020\013\042\016\043\014\001\002\000\016" +
    "\005\004\012\020\013\007\020\013\042\016\043\014\001" +
    "\002\000\016\005\004\012\020\013\007\020\013\042\016" +
    "\043\014\001\002\000\016\005\004\012\020\013\007\020" +
    "\013\042\016\043\014\001\002\000\022\004\030\005\031" +
    "\006\033\007\032\014\uffd6\021\uffd6\027\uffd6\030\uffd6\001" +
    "\002\000\022\004\030\005\031\006\033\007\032\014\uffd7" +
    "\021\uffd7\027\uffd7\030\uffd7\001\002\000\022\004\030\005" +
    "\031\006\033\007\032\014\uffd3\021\uffd3\027\uffd3\030\uffd3" +
    "\001\002\000\022\004\030\005\031\006\033\007\032\014" +
    "\uffd2\021\uffd2\027\uffd2\030\uffd2\001\002\000\022\004\030" +
    "\005\031\006\033\007\032\014\uffd5\021\uffd5\027\uffd5\030" +
    "\uffd5\001\002\000\022\004\030\005\031\006\033\007\032" +
    "\014\uffd4\021\uffd4\027\uffd4\030\uffd4\001\002\000\016\005" +
    "\uffec\012\uffec\013\uffec\020\uffec\042\uffec\043\uffec\001\002" +
    "\000\016\005\ufff3\012\ufff3\013\ufff3\020\ufff3\042\ufff3\043" +
    "\ufff3\001\002\000\016\005\004\012\020\013\007\020\013" +
    "\042\016\043\014\001\002\000\014\004\030\005\031\006" +
    "\033\007\032\021\ufff2\001\002\000\004\021\076\001\002" +
    "\000\034\005\ufff1\012\ufff1\013\ufff1\016\ufff1\020\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\001\002\000\034\005\004\012\020\013\007\016" +
    "\017\020\013\033\021\034\024\035\012\037\010\040\015" +
    "\041\006\042\016\043\014\001\002\000\042\002\ufff0\005" +
    "\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0\020\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\001\002\000\012\014\uffd1\021\uffd1\027\045" +
    "\030\046\001\002\000\040\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\014\uffe7\015\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\001\002\000" +
    "\040\004\uffe6\005\uffe6\006\uffe6\007\uffe6\014\uffe6\015\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\001\002\000\040\004\uffe8\005\uffe8" +
    "\006\033\007\032\014\uffe8\015\uffe8\021\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\001\002\000\040\004\uffe9\005\uffe9\006\033\007\032\014" +
    "\uffe9\015\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000\004\002" +
    "\000\001\002\000\040\002\001\005\001\012\001\013\001" +
    "\016\001\017\001\020\001\033\001\034\001\035\001\037" +
    "\001\040\001\041\001\042\001\043\001\001\002\000\004" +
    "\042\112\001\002\000\042\002\ufffd\005\ufffd\012\ufffd\013" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\001" +
    "\002\000\010\010\113\014\uffd9\015\uffd9\001\002\000\016" +
    "\005\004\012\020\013\007\020\013\042\016\043\014\001" +
    "\002\000\016\004\030\005\031\006\033\007\032\014\uffdb" +
    "\015\uffdb\001\002\000\016\005\004\012\020\013\007\020" +
    "\013\042\016\043\014\001\002\000\014\004\030\005\031" +
    "\006\033\007\032\021\117\001\002\000\004\014\120\001" +
    "\002\000\042\002\uffef\005\uffef\012\uffef\013\uffef\016\uffef" +
    "\017\uffef\020\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\001\002\000\040" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\014\uffdf\015\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\001\002\000\034\005\004\012\020\013" +
    "\007\016\017\020\013\033\021\034\024\035\012\037\010" +
    "\040\015\041\006\042\016\043\014\001\002\000\036\005" +
    "\004\012\020\013\007\016\017\017\124\020\013\033\021" +
    "\034\024\035\012\037\010\040\015\041\006\042\016\043" +
    "\014\001\002\000\042\002\uffee\005\uffee\012\uffee\013\uffee" +
    "\016\uffee\017\uffee\020\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\001\002" +
    "\000\040\004\uffe0\005\uffe0\006\uffe0\007\uffe0\014\uffe0\015" +
    "\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\001\002\000\040\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\014\uffe1\015\uffe1\021\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\001\002\000\016\005\004\012\020\013\007\020\013" +
    "\042\016\043\014\001\002\000\040\004\030\005\031\006" +
    "\033\007\032\014\uffe2\015\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\001" +
    "\002\000\034\005\ufff6\012\ufff6\013\ufff6\016\ufff6\020\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\001\002\000\034\005\004\012\020\013\007" +
    "\016\017\020\013\033\021\034\024\035\012\037\010\040" +
    "\015\041\006\042\016\043\014\001\002\000\004\037\134" +
    "\001\002\000\004\020\135\001\002\000\020\005\004\012" +
    "\020\013\007\020\042\022\037\042\016\043\014\001\002" +
    "\000\010\021\137\027\045\030\046\001\002\000\004\014" +
    "\140\001\002\000\042\002\ufff5\005\ufff5\012\ufff5\013\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\001\002" +
    "\000\014\004\030\005\031\006\033\007\032\021\055\001" +
    "\002\000\020\005\004\012\020\013\007\020\042\022\037" +
    "\042\016\043\014\001\002\000\010\021\144\027\045\030" +
    "\046\001\002\000\034\005\ufffc\012\ufffc\013\ufffc\016\ufffc" +
    "\020\ufffc\033\ufffc\034\ufffc\035\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\001\002\000\034\005\004\012\020" +
    "\013\007\016\017\020\013\033\021\034\024\035\012\037" +
    "\010\040\015\041\006\042\016\043\014\001\002\000\042" +
    "\002\uffec\005\uffec\012\uffec\013\uffec\016\uffec\017\uffec\020" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\001\002\000\042\002\ufffb\005" +
    "\ufffb\012\ufffb\013\ufffb\016\ufffb\017\ufffb\020\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\001\002\000\042\002\uffea\005\uffea\012\uffea" +
    "\013\uffea\016\uffea\017\uffea\020\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\151\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\001\002\000\034\005\004\012\020\013\007\016\017\020" +
    "\013\033\021\034\024\035\012\037\010\040\015\041\006" +
    "\042\016\043\014\001\002\000\042\002\ufffa\005\ufffa\012" +
    "\ufffa\013\ufffa\016\ufffa\017\ufffa\020\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\001\002\000\042\002\uffeb\005\uffeb\012\uffeb\013\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002" +
    "\000\042\002\ufffe\005\ufffe\012\ufffe\013\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\001\002\000\020\005" +
    "\uffec\012\uffec\013\uffec\020\uffec\022\uffec\042\uffec\043\uffec" +
    "\001\002\000\020\005\ufff9\012\ufff9\013\ufff9\020\ufff9\022" +
    "\ufff9\042\ufff9\043\ufff9\001\002\000\020\005\004\012\020" +
    "\013\007\020\042\022\037\042\016\043\014\001\002\000" +
    "\010\021\161\027\045\030\046\001\002\000\034\005\ufff8" +
    "\012\ufff8\013\ufff8\016\ufff8\020\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\001\002" +
    "\000\034\005\004\012\020\013\007\016\017\020\013\033" +
    "\021\034\024\035\012\037\010\040\015\041\006\042\016" +
    "\043\014\001\002\000\042\002\ufff7\005\ufff7\012\ufff7\013" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\001" +
    "\002\000\040\004\uffde\005\uffde\006\uffde\007\uffde\014\uffde" +
    "\015\uffde\021\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\001\002\000\010\010\166" +
    "\014\uffda\015\uffda\001\002\000\016\005\004\012\020\013" +
    "\007\020\013\042\016\043\014\001\002\000\016\004\030" +
    "\005\031\006\033\007\032\014\uffdc\015\uffdc\001\002\000" +
    "\040\004\uffe5\005\uffe5\006\uffe5\007\uffe5\014\uffe5\015\uffe5" +
    "\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\014\002\022\003\024\004\010\010\004\011" +
    "\021\001\001\000\004\004\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\140\001\001" +
    "\000\002\001\001\000\004\005\130\001\001\000\002\001" +
    "\001\000\004\012\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\106\004\010\010" +
    "\004\011\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\026\001\001\000\002\001\001\000\004\004" +
    "\104\001\001\000\004\004\103\001\001\000\004\004\102" +
    "\001\001\000\004\004\101\001\001\000\004\005\034\001" +
    "\001\000\004\020\035\001\001\000\006\004\037\006\040" +
    "\001\001\000\006\004\037\006\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\042\006\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\051\001" +
    "\001\000\004\024\047\001\001\000\002\001\001\000\006" +
    "\004\037\006\050\001\001\000\002\001\001\000\006\004" +
    "\037\006\052\001\001\000\002\001\001\000\004\004\067" +
    "\001\001\000\002\001\001\000\004\004\066\001\001\000" +
    "\004\004\065\001\001\000\004\004\064\001\001\000\004" +
    "\004\063\001\001\000\004\004\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\071\001" +
    "\001\000\004\021\072\001\001\000\004\004\073\001\001" +
    "\000\004\022\074\001\001\000\002\001\001\000\004\023" +
    "\076\001\001\000\012\003\077\004\010\010\004\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\113\001\001" +
    "\000\002\001\001\000\004\004\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\122\003\024\004\010\010\004\011\021\001" +
    "\001\000\012\003\106\004\010\010\004\011\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\127\001\001\000\002\001\001\000\004\017\131" +
    "\001\001\000\012\003\132\004\010\010\004\011\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\037" +
    "\006\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\037\006\142" +
    "\001\001\000\002\001\001\000\004\013\144\001\001\000" +
    "\012\003\145\004\010\010\004\011\021\001\001\000\004" +
    "\005\146\001\001\000\004\014\147\001\001\000\004\007" +
    "\151\001\001\000\012\003\152\004\010\010\004\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\155\001\001\000\004\015\156\001\001" +
    "\000\006\004\037\006\157\001\001\000\002\001\001\000" +
    "\004\016\161\001\001\000\012\003\162\004\010\010\004" +
    "\011\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\166\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    int numBloque = 0;

    VariablesTabla tablaS = new VariablesTabla();

    int numVar = 0;

    public String newVar(){
        numVar++;
        return "$t"+Integer.toString(numVar);
    }


    int numSaltos = 0;

    public String newSalt(){
        numSaltos++;
        return "L"+Integer.toString(numSaltos);
    }

    public String currentSalt(){
        return "L"+Integer.toString(numSaltos);
    }


    public class saltosCond{
        public String sv, sf;

        public saltosCond(String sv, String sf){
            this.sv = sv;
            this.sf = sf;
        }
    }

    String saltoWhile="";
    String saltoFor="";

    Stack<String> pila = new Stack<>();
    Stack<String> pila2 = new Stack<>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaSent ::= listaSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaSent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= variable PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= IF AP condicion CP NT$0 sent saltos NT$1 elseornot 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= WHILE AP saltos NT$2 condicion CP NT$3 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= DO saltos NT$4 sent WHILE AP condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println(v.sv+":"); PLXC.out.println("\tgoto "+v2+";"); PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v1+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(v2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
PLXC.out.println("\tgoto "+v1+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
PLXC.out.println(v.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent ::= FOR AP expresion PYC saltos NT$5 condicion PYC saltos NT$6 expresion NT$7 CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		PLXC.out.println("\tgoto "+v2+";");PLXC.out.println(v.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= PRINT AP expresion CP PYC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println("\tprint "+v+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= AL bloque listaSent CL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tablaS.deleteBloque(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque ::= 
            {
              Integer RESULT =null;
		numBloque++;RESULT= numBloque;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // saltos ::= 
            {
              String RESULT =null;
		RESULT= newSalt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseornot ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elseornot ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseornot",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion MAS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"+"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion POR expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"*"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion DIV expresion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"="+v1+"/"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= MENOS expresion 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String var = newVar(); 
                                                  PLXC.out.println("\t"+var+"=0-"+v2+";");
                                                  RESULT=var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= AP expresion CP 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contiene(v)){
                                                    RESULT=tablaS.getMayorBloque(v);
                                                  }else{
                                                    PLXC.out.println("\t"+"error;");
                                                    System.exit(1);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= STRING ASIG expresion 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contiene(v)){
                                                    String variable = tablaS.getMayorBloque(v);
                                                    System.out.println("\t"+variable+"="+v2+";");
                                                    RESULT=variable;
                                                  }else{
                                                    PLXC.out.println("\t"+"error;");
                                                    System.exit(1);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= STRING MASMAS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tablaS.contiene(v)){
                                                    String variable = tablaS.getMayorBloque(v);
                                                    String variable2 = newVar();
                                                    PLXC.out.println("\t"+variable2+"="+variable+";");
                                                    PLXC.out.println("\t"+variable+"="+variable+"+1;");
                                                    RESULT=variable2;
                                                  }else{
                                                    PLXC.out.println("\t"+"error;");
                                                    System.exit(1);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= STRING MENOSMENOS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tablaS.contiene(v)){
                                                    String variable = tablaS.getMayorBloque(v);
                                                    String variable2 = newVar();
                                                    PLXC.out.println("\t"+variable2+"="+variable+";");
                                                    PLXC.out.println("\t"+variable+"="+variable+"-1;");
                                                    RESULT=variable2;
                                                  }else{
                                                    PLXC.out.println("\t"+"error;");
                                                    System.exit(1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= MASMAS STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contiene(v)){
                                                    String variable = tablaS.getMayorBloque(v);
                                                    PLXC.out.println("\t"+variable+"="+variable+"+1;");
                                                    RESULT=variable;
                                                  }else{
                                                    PLXC.out.println("\t"+"error;");
                                                    System.exit(1);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= MENOSMENOS STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contiene(v)){
                                                    String variable = tablaS.getMayorBloque(v);
                                                    PLXC.out.println("\t"+variable+"="+variable+"-1;");
                                                    RESULT=variable;
                                                  }else{
                                                    PLXC.out.println("\t"+"error;");
                                                    System.exit(1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= NUM 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= tipo STRING ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contieneBloque(v1, numBloque)){
                                                     PLXC.out.println("\t"+"error;");
                                                     System.exit(1);
                                                  }else{
                                                    PLXC.out.println("\t"+v1+"="+v2+";");
                                                    tablaS.introduceVariable(v1, numBloque);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= variable COMA STRING ASIG expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contieneBloque(v1, numBloque)){
                                                     PLXC.out.println("\t"+"error;");
                                                     System.exit(1);
                                                  }else{
                                                    PLXC.out.println("\t"+v1+"="+v2+";");
                                                    tablaS.introduceVariable(v1, numBloque);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable ::= tipo STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contieneBloque(v1, numBloque)){
                                                     PLXC.out.println("\t"+"error;");
                                                     System.exit(1);
                                                  }else{
                                                    tablaS.introduceVariable(v1, numBloque);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= variable COMA STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(tablaS.contieneBloque(v1, numBloque)){
                                                     PLXC.out.println("\t"+"error;");
                                                     System.exit(1);
                                                  }else{
                                                    tablaS.introduceVariable(v1, numBloque);
                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion ::= expresion IGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"=="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion ::= expresion DISTINTO expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"!="+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion ::= expresion MENOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= expresion MENORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= expresion MAYOR expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v2+"<"+v1+") goto "+slt.sv+";");
                                                PLXC.out.println("\tgoto "+slt.sf+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= expresion MAYORIGUAL expresion 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		saltosCond slt = new saltosCond(newSalt(), newSalt());
                                                PLXC.out.println("\tif("+v1+"<"+v2+") goto "+slt.sf+";");
                                                PLXC.out.println("\tgoto "+slt.sv+";");
                                                RESULT=slt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= NEGADO condicion 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new saltosCond(v.sf, v.sv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$9 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= condicion Y NT$9 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(v1.sf+":");
                             PLXC.out.println("\tgoto "+v2.sf+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$10 ::= 
            {
              saltosCond RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(v1.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicion ::= condicion OR NT$10 condicion 
            {
              saltosCond RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (saltosCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		saltosCond v1 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		saltosCond v2 = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(v1.sv+":");
                             PLXC.out.println("\tgoto "+v2.sv+";");
                             RESULT=v2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= AP condicion CP 
            {
              saltosCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		saltosCond v = (saltosCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
