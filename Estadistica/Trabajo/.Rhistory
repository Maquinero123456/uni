source("C:/Users/david/Desktop/uni/Estadistica/Trabajo/Trabajo.R")
datos <- datos %>% select(all_of(df))
datos
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
#2
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
datos <- datos %>% select(any_of(df))
datos
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
#2
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
datos <- datos %>% select(-contains(df))
datos
#1
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
#2
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
#3
na <- as.data.frame(
cbind(
lapply(
lapply(datos, is.na), sum)
)
)
datos <- datos %>% select(-contains(rownames(subset(df, df$V1 != 0))))
#1
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
#2
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
#3
na <- as.data.frame(
cbind(
lapply(
lapply(datos, is.na), sum)
)
)
na <- rownames(subset(df, df$V1 != 0))
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
#2
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
#3
na <- as.data.frame(
cbind(
lapply(
lapply(datos, is.na), sum)
)
)
datos <- datos %>% select(-contains(rownames(subset(na, na$V1 != 0))))
datos
#1
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
datos
#2
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
datos
#3
na <- as.data.frame(
cbind(
lapply(
lapply(datos, is.na), sum)
)
)
datos <- datos %>% select(-contains(rownames(subset(na, na$V1 != 0))))
datos
media <- as.data.frame(
cbind(
lapply(
datos, median)
)
)
madia
media
media <- as.data.frame(
cbind(
lapply(
lapply(datos, is.numeric), median)
)
)
media
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric_df <- datos %>% select(select_all(rownames(subset(numeric, numeric$V1 != 0))))
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric_df <- datos %>% select(select_all(rownames(subset(numeric, numeric$V1 == True))))
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric_df <- datos %>% select(select_all(rownames(subset(numeric, numeric$V1 == TRUE))))
rownames(subset(numeric, numeric$V1 == TRUE))
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric <- rownames(subset(numeric, numeric$V1 == TRUE))
numeric
numeric_df <- datos %>% select(select_all(numeric))
numeric_df <- datos %>% select(any_of(numeric))
numeric_df
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric_df <- datos %>% select(any_of(rownames(subset(numeric, numeric$V1 == TRUE))))
numeric_df
na <- as.data.frame(
cbind(
lapply(
datos, is.na)
)
)
na
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric_df <- datos %>% select(any_of(rownames(subset(numeric, numeric$V1 == TRUE))))
numeric_df
media <- as.data.frame(
cbind(
lapply(
numeric_df, median)
)
)
media
median(numeric_df)
media <-
cbind(
lapply(
numeric_df, median)
)
media
desviacion_tipica <- as.data.frame(
cbind(
lapply(
numeric_df, sd)
)
)
desviacion_tipica
media <-
cbind(
lapply(
numeric_df, mean)
)
media
desviacion_tipica_fn <- function(pa) {
return(sqrt(mean(ap^2) - mean(ap)^2))
}
desviacion_tipica <-
cbind(
lapply(
numeric_df, desviacion_tipica_fn)
)
desviacion_tipica_fn <- function(ap) {
return(sqrt(mean(ap^2) - mean(ap)^2))
}
desviacion_tipica <-
cbind(
lapply(
numeric_df, desviacion_tipica_fn)
)
desviacion_tipica
#Nos quedamos con las columnas que tengan valores solo numericos
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric_df <- datos %>% select(any_of(rownames(subset(numeric, numeric$V1 == TRUE))))
numeric_df
lm(numeric_df$peso, data = numeric_df)
lm(numeric_df.peso ~ numeric_df.altura, data=numeric_df)
lm(peso ~ altura, data=numeric_df)
#5
lm(peso ~ peso, data=numeric_df)
datos.length
datos.length()
#7
daply(datos)
library(dplyr)
cutoff <- round(0.6*nrow(datos))
entrenamiento <- datos[1:cutoff]
library(tidyverse)
library(dplyr)
#1
#Cargamos el csv
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
datos
#2
#Añadimos la columna IMC
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
datos
#7
cutoff <- round(0.6*nrow(datos))
entrenamiento <- datos[1:cutoff]
entrenamiento <- datos[1:cutoff,]
cutoff <- round(0.6*nrow(datos))
entrenamiento <- datos[1:cutoff,]
nrow(datos)
entrenamiento
sesenta <- round(0.6*nrow(datos))
veinte <- round(0.2*nrow(datos))
entrenamiento <- datos[1:sesenta,]
test <- datos[cutoff:(cutoff+veinte), ]
validacion <- datos[-(cutoff:(cutoff+veinte)), ]
test
entrenamiento
dividirDataSet <- function(data, p1, p2){
sesenta <- round(p1*nrow(datos))
veinte <- round(p2*nrow(datos))
entrenamiento <- datos[1:sesenta,]
test <- datos[cutoff:(cutoff+veinte), ]
validacion <- datos[-(cutoff:(cutoff+veinte)), ]
return(list(entrenamiento, test, validacion))
}
dataSet <- dividirDataSet(datos, 0.6, 0.2)
dataSet
dataSet[0]
dataSet[1ç]
dataSet[1]
dividirDataSet <- function(data, p1, p2){
sesenta <- round(p1*nrow(datos))
veinte <- round(p2*nrow(datos))
entrenamiento <- datos[1:sesenta,]
test <- datos[cutoff:(cutoff+veinte), ]
validacion <- datos[-(cutoff:(cutoff+veinte)), ]
return(as.data.frame(entrenamiento, test, validacion))
}
dataSet <- dividirDataSet(datos, 0.6, 0.2)
dataSet[1]
dividirDataSet <- function(data, p1, p2){
sesenta <- round(p1*nrow(datos))
veinte <- round(p2*nrow(datos))
entrenamiento <- datos[1:sesenta,]
test <- datos[cutoff:(cutoff+veinte), ]
validacion <- datos[-(cutoff:(cutoff+veinte)), ]
return(list(entrenamiento = entrenamiento, test= test, validacion=validacion))
}
dataSet <- dividirDataSet(datos, 0.6, 0.2)
dataSet$entrenamiento
dividirDataSet <- function(data, p1, p2){
sesenta <- round(p1*nrow(datos))
veinte <- round(p2*nrow(datos))
return(list(entrenamiento = datos[1:sesenta,], test=  datos[sesenta:(sesenta+veinte), ], validacion=datos[-(sesenta:(sesenta+veinte)), ]))
}
dataSet <- dividirDataSet(datos, 0.6, 0.2)
dataSet$entrenamiento
#Cargamos el csv
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
library(tidyverse)
library(dplyr)
s el csv
#1
#Cargamos el csv
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
datos
#2
#Añadimos la columna IMC
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
datos
#7
dividirDataSet <- function(data, p1, p2){
sesenta <- round(p1*nrow(datos))
veinte <- round(p2*nrow(datos))
return(list(entrenamiento = datos[1:sesenta,], test=  datos[sesenta:(sesenta+veinte), ], validacion=datos[-(sesenta:(sesenta+veinte)), ]))
}
dataSet <- dividirDataSet(datos, 0.6, 0.2)
sample <- sample(datos, nrow(datos), prob = c(0.6, 0.2, 0.2))
sample <- sample(datos, nrow(datos), replace=TRUE, prob = c(0.6, 0.2, 0.2))
sample <- sample(datos, nrow(datos), replace=TRUE, prob = c(0.6, 0.2))
sample <- sample(datos, nrow(datos), replace=TRUE, prob = c(0.6, 0.2, 0.2))
sample <- sample(datos, nrow(datos), replace=TRUE, prob = c(0.6, 0.4))
#5
lm(peso ~ 1, datos)
datos
#5
lm(sexo ~ 1, datos)
#5
lm(numeric ~ 1, datos)
numeric
#5
lm(rownames(subset(numeric, numeric$V1 == TRUE)) ~ 1, datos)
#5
lm("peso" ~ 1, datos)
#5
lm(peso ~ 1, datos)
#5
regresion_lineal_unidimensional <- function(columna, datos) {
return(lm(columna ~ 1, datos))
}
regresion_linea <-
cbind(
lapply(
rownames(numeric_df), regresion_lineal_unidimensional)
)
#5
regresion_lineal_unidimensional <- function(columna) {
return(lm(columna ~ 1, datos))
}
regresion_linea <-
cbind(
lapply(
rownames(numeric_df), regresion_lineal_unidimensional)
)
regresion_lineal
regresion_linea
rownames(numeric_df)
numeric_df
colnames(numeric_df)
regresion_linea <-
cbind(
lapply(
colnames(numeric_df), regresion_lineal_unidimensional)
)
datos <- read_csv("./17456.csv", col_types = cols(.default = col_double(), sexo = col_character(), dietaEsp = col_character()))
datos
#2
#Añadimos la columna IMC
datos <- add_column(datos, IMC = datos$peso/(datos$altura^2))
datos
#3
#Eliminamos las columnas con valores na
#Primero vemos que columnas tienen valores na
na <- as.data.frame(
cbind(
lapply(
lapply(datos, is.na), sum)
)
)
#Ahora seleccionamos las columnas que no tengan valores na
datos <- datos %>% select(-contains(rownames(subset(na, na$V1 != 0))))
datos
#4
numeric <- as.data.frame(
cbind(
lapply(
datos, is.numeric)
)
)
numeric_df <- datos %>% select(any_of(rownames(subset(numeric, numeric$V1 == TRUE))))
numeric_df
regresion_lineal_unidimensional <- function(columna) {
return(lm(columna ~ 1, datos))
}
regresion_linea <-
cbind(
lapply(
colnames(numeric_df), regresion_lineal_unidimensional)
)
regresion_lineal_unidimensional <- function(columna) {
return(lm(columna ~ 1, numeric_df))
}
regresion_linea <-
cbind(
lapply(
colnames(numeric_df), regresion_lineal_unidimensional)
)
datos
numeric_df
lm(tabaco ~ 1, numeric_df)
pairs(numeric_df)
regresion_linea <-
cbind(
lapply(
numeric_df, regresion_lineal_unidimensional)
)
regresion_linea
regresion_linea[1]
summary(regresion_linea[1])
regresion_linea[1]
ln(peso ~altura, numeric_df)
lm(peso ~altura, numeric_df)
summary(lm(peso ~altura, numeric_df))
summary(lm(peso ~ 1, numeric_df))
#5
regresion_lineal_unidimensional <- function(columna) {
return(lm(columna ~ 1, numeric_df))
}
regresion_lineales <-
cbind(lapply(
lapply(
numeric_df, regresion_lineal_unidimensional), summary)
)
regresion_lineales
regresion_lineales[1]
datosRandom <- regresion_lineales[1]
datosRandom
names(datosRandom)
datosRandom$coefficients
datosRandom$Coefficients
datosRandom$call
datosRandom
datosRandom[1]
datosRandom[1]$call
datosRandom[[1]]
datosRandom[[1]]$call
regresion_lineales <-
cbind(lapply(
lapply(
numeric_df, regresion_lineal_unidimensional)[[1]], summary)
)
regresion_lineales
datosRandom <- regresion_lineales[[1]]
regresion_lineales <-
cbind(lapply(
lapply(
numeric_df, regresion_lineal_unidimensional), summary)
)
datosRandom <- regresion_lineales[[1]]
datosRandom
regresion_lineales <-
cbind(lapply(
lapply(
numeric_df, regresion_lineal_unidimensional)[1], summary)
)
regresion_lineales
#6
#Grafico variables numericas
plot(x=numericos_df$peso, y=1)
#6
#Grafico variables numericas
plot(x=numeric_df$peso, y=1)
#6
#Grafico variables numericas
plot(x=numeric_df$peso, y=numeric_df$peso)
rowMeans(datos)
rowMeans(numeric_df)
col_number(numeric_df)
col_number(numeric_df)
row_number(numeric_df)
nrow(numeric_df)
#6
#Grafico variables numericas
plot(x=numeric_df$peso, y=nrow(numeric_df))
#6
#Grafico variables numericas
plot(x=numeric_df$peso, y=nrow(numeric_df$peso))
regresion_lineales <-
cbind(
lapply(
numeric_df, regresion_lineal_unidimensional)
)
abline(regresion_lineales[1])
regresion_lineales[1]
plot(x=numeric_df$peso, y=nrow(numeric_df$peso))
abline(regresion_lineales[1])
plot(x=numeric_df$peso, y=nrow(numeric_df$peso))
abline(regresion_lineales[1],col="red")
abline(regresion_lineales[[1]],col="red")
regresion_lineales <-as.data.frame(
cbind(
lapply(
numeric_df, regresion_lineal_unidimensional)
))
regresion_lineales
regresion_lineales <-
cbind(
lapply(
numeric_df, regresion_lineal_unidimensional)
)
regresion_lineales
regresion_lineales[1]
row.names(numeric_df)
col.names(numeric_df)
colnames(numeric_df)
regresion_lineales
datos
boxplot(datos$sexo, horizontal = TRUE)
boxplot(as.numeric(datos$sexo), horizontal = TRUE)
View(datos)
View(datos)
View(datos)
as.numeric(datos$sexo)
as.numeric(datos$sexo==M)
as.numeric(datos$sexo=="M")
view(datos)
boxplot(as.numeric(datos$sexo=="M"), horizontal = TRUE)
stripchart(as.numeric(datos$sexo=="M"), method = "jitter", pch = 19, add = TRUE, col = "blue")
boxplot(as.numeric(datos$dietaEsp=="S"), horizontal = TRUE)
stripchart(as.numeric(datos$dietaEsp=="S"), method = "jitter", pch = 19, add = TRUE, col = "blue")
#Boxplot
boxplot(formula =as.numeric(datos$sexo=="M")~1, data=datos, horizontal = TRUE)
#Boxplot
boxplot(as.numeric(datos$sexo=="M"), horizontal = TRUE)
stripchart(as.numeric(datos$sexo=="M"), method = "jitter", pch = 19, add = TRUE, col = "blue")
#Boxplot
plot(as.numeric(datos$sexo=="M"), horizontal = TRUE)
